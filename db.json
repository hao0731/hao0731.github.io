{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1693838089119},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1694004456126},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"86569b94949392e9b981608433495f0941d20b0c","modified":1694004456226},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"b5d6e7271b88d1a63755386442663af03e36a428","modified":1694004456227},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"459517785a7161e07c333bfe2900243b6287f905","modified":1694004456314},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"656d8b548940d7d214459cd8853007af38e6c465","modified":1694004456226},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"d0e179ae31cdc62037062432b0ee7a9008155a73","modified":1694004456319},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1694004456318},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":1694004456321},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1694004456321},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1694004456318},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1694004456252},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1694004456243},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1694004456270},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1694004456275},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1694004456282},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1694004456278},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1694004456315},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1694004456316},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1694004456319},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1694004456320},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1694004456320},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1694004456229},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1694004456235},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1694004456261},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1694004456263},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1694004456271},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1694004456275},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"d15124c488273ea0801a042888feadc9261d0b2f","modified":1694004456280},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1694004456199},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1694004456281},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1694004456207},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1694004456208},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1694004456211},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1694004456221},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1694004456225},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1694004456219},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1694004456219},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1694004456205},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1694004456205},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1694004456208},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1694004456211},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1694004456218},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1694004456220},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1694004456207},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1694004456209},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1694004456209},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1694004456210},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1694004456212},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1694004456212},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1694004456216},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1694004456216},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1694004456220},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1694004456221},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1694004456221},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1694004456305},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1694004456313},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1694004456228},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1694004456193},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1694004456181},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1694004456216},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1694004456224},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1694004456224},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1694004456274},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1694004456240},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":1694004456253},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1694004456252},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1694004456263},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1694004456274},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1694004456278},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1694004456279},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1694004456281},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1694004456265},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1694004456272},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1694004456273},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1694004456277},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1694004456281},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1694004456261},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1694004456266},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1694004456275},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"1ed873db25eec869beebb6873f04e19f0b0f4134","modified":1694004456278},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1694004456246},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1694004456251},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1694004456254},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1694004456260},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1694004456282},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1694004456277},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1694004456280},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1694004456242},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1694004456258},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1694004456276},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"cde142861edfc7aab435b8a0ebb84d9ba450fb5b","modified":1694004456276},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1694004456278},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1694004456282},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1694004456246},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1694004456246},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1694004456247},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1694004456247},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1694004456247},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1694004456248},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1694004456248},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1694004456249},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1694004456249},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1694004456250},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1694004456250},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1694004456251},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1694004456269},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"e0de61a059b5e6c7b8ebc7149b4650bdcd69af5e","modified":1694004456300},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"51868d861c94a9f1ad7c0dbd66d2f475c5d4ea62","modified":1694004456303},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":1694004456302},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1694004456312},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1694004456289},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1694004456291},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1694004456291},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1694004456298},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"8cd2aaa32cd68cd1908c9001444a811c3d0f9267","modified":1694004456301},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1694004456306},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1694004456309},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"fc9424d9c5def2201ec1d04dc79d0beedc1d2175","modified":1694004456309},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1694004456310},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1694004456310},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1694004456310},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1694004456311},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1694004456312},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"e4f948b0d4eb5483b2b360e56cbfe3359751b438","modified":1694004456293},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"c481d1f689a4e6d7ee492a03751bda47a30225ce","modified":1694004456309},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1694004456287},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1694004456288},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1694004456291},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1694004456291},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1694004456298},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"b3ea08d9460122751144a3ca835e009a460d6ad3","modified":1694004456303},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1694004456312},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1694004456288},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1694004456304},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1694004456306},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1694004456290},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1694004456300},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1694004456301},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1694004456301},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1694004456305},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1694004456305},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1694004456308},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1694004456312},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1694004456313},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1694004456143},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1694004456202},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1694004456212},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1694004456230},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1694004456266},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1694004456243},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1694004456255},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1694004456260},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1694004456267},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1694004456279},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1694004456283},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1694004456284},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1694004456254},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1694004456254},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"d02f3cc9e6183e7d05c7e90e9ae1dee5ce21f297","modified":1694004456286},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1694004456268},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1694004456252},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1694004456273},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1694004456282},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5d8a0a3a7690d6d01e3feb91c2a36a5cd651b1","modified":1694004456244},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":1694004456255},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":1694004456256},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":1694004456259},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":1694004456261},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":1694004456262},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"35ae7980f658a349c5956c5699efd435b604b836","modified":1694004456268},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1694004456270},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1694004456271},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":1694004456279},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":1694004456284},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":1694004456284},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1694004456286},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":1694004456286},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1694004456268},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1694004456271},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1694004456272},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d0ce1891b042dcc2c93cacc866e38721b94aa4c4","modified":1694004456273},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"8c0d9a45bd2d83cc6d0e7bbfe172a09ff33c0178","modified":1694004456245},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1694004456255},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1694004456263},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1694004456269},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1694004456279},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1694004456283},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1694004456286},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ae1ccd78926cc19399d396b237d5161d7cde44a8","modified":1694004456287},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1694004456238},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1694004456256},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1694004456269},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1694004456272},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1694004456232},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1694004456269},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1694004456280},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1694004456236},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1694004456295},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1694004456303},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1694004456304},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1694004456297},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1694004456306},{"_id":"source/.DS_Store","hash":"1984b39e46ccaea7e1c285410bd86bc1266ef472","modified":1736586560442},{"_id":"source/images/avatar.png","hash":"0a474567541b578b72da028a732afeefc170897b","modified":1694352514017},{"_id":"public/404.html","hash":"f1460a2377b30d54f18b9cbf61bc0177b4655eab","modified":1694247053697},{"_id":"public/archives/index.html","hash":"52a64fb81b0e5e59ba0928a5dfee652be153d704","modified":1694247053697},{"_id":"public/archives/2023/index.html","hash":"8a279331ca96ca8c9adfac43981d986269eb0e05","modified":1694247053697},{"_id":"public/archives/2023/09/index.html","hash":"0ce24b82d4d746e3499351baed19a63282e04aa6","modified":1694247053697},{"_id":"public/2023/09/04/hello-world/index.html","hash":"4bd59cd662e56463b26638a5f6a98bd74dd40860","modified":1694247053697},{"_id":"public/index.html","hash":"311864c96550125f6e3b840cb3c6dd5c73585c53","modified":1694247053697},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1694247053697},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1694247053697},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1694247053697},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1694247053697},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1694247053697},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1694247053697},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1694247053697},{"_id":"public/css/index.css","hash":"ae90d7a6ddaeca79c519bc012356ee10e981c549","modified":1694247053697},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1694247053697},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1694247053697},{"_id":"public/images/avatar.png","hash":"afc978cf9cd588f844fe0251b9174685ee483aae","modified":1694247053697},{"_id":"source/_posts/about.md","hash":"b8199a75d2a750b6d38394c0a2c4290bf35ba45e","modified":1694247141892},{"_id":"source/_posts/page/about.md","hash":"b8199a75d2a750b6d38394c0a2c4290bf35ba45e","modified":1694247141892},{"_id":"source/about/index.md","hash":"b887ec5688218a63dbb23391e9f9466b67470b9b","modified":1736604909310},{"_id":"source/_data/widget.yml","hash":"55611def3a587eb3a743b970f6738c641d5dd29b","modified":1694250063391},{"_id":"source/_posts/0001-lazy-web-component.md","hash":"4361439147639f46ce070d79ad46a396121e2747","modified":1694250865643},{"_id":"source/_data/link.yml","hash":"b1aab913146cb0be9585a7ff492f4d18c5ffa312","modified":1694251080220},{"_id":"source/tags/index.md","hash":"813bee740cbc590b61deecc3480aefba4d8e0c7e","modified":1694251324021},{"_id":"source/categories/index.md","hash":"77c911213b73839337448719f907b97118081950","modified":1694251317517},{"_id":"source/_posts/0001-dynamic-load-web-component.md","hash":"2d458ff055e03fb3d1050f53a703288119525358","modified":1694350079398},{"_id":"source/_posts/0001-dynamic-load-web-component/web-component-dynamic-loader.png","hash":"e6661b14f68c0d4b2ae56a1d0a05666c48afe905","modified":1694348898625},{"_id":"source/images/.DS_Store","hash":"8b3ade9678b63309bd9ad380fe7f99cd44cc4806","modified":1694349740290},{"_id":"source/_posts/0001-dynamic-load-web-component/web-component-for-framework.png","hash":"fac7da0536d5b76a5b4d96d8094fe5aa06850ede","modified":1694347396606},{"_id":"source/_posts/0002-nestjs-discovery-module.md","hash":"e44b1f690a79dfefe5d2e96c80026ad5938bc83e","modified":1694943742596},{"_id":"source/_posts/0002-nestjs-discovery-module/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1694943849440},{"_id":"source/_posts/0003-what-is-krakend.md","hash":"3189f2a8712343920f6b192ea781b845c6b51718","modified":1736595613352},{"_id":"source/_posts/0003-what-is-krakend/krakend-flow.png","hash":"6828280421f114b94faa3043e7489e69fee58184","modified":1736152807140},{"_id":"source/_posts/.DS_Store","hash":"5f43defe8799f3e797ab8fba2c27ad59b03b013b","modified":1736586576031},{"_id":"source/_posts/0003-what-is-krakend/health-check-result.png","hash":"7d2ebc70f2cd7cb3faaa866654b6b4920c007cb1","modified":1736157005219},{"_id":"source/_posts/0003-what-is-krakend/krakend-result.png","hash":"2dddae207c7327a117227a7c6324c4825d1029d9","modified":1736586522649},{"_id":"source/_posts/0003-what-is-krakend/krakend-help.png","hash":"bdd901690a5a9cc21c960fadfde27c431d3403fa","modified":1736343634645}],"Category":[{"name":"Frontend","_id":"clmbt6q9w0000vzgxcgga6r3x"},{"name":"Web Component","parent":"clmbt6q9w0000vzgxcgga6r3x","_id":"clmbt6qa10001vzgxd2p3a5xl"},{"name":"Angular","parent":"clmbt6q9w0000vzgxcgga6r3x","_id":"clmbt7aqn0004vzgx81r9gxuu"},{"name":"Backend","_id":"clmn9ksuy000227gxcotf2d2u"},{"name":"NestJS","parent":"clmn9ksuy000227gxcotf2d2u","_id":"clmn9ksuz000427gx95ztax8o"},{"name":"Advanced","parent":"clmn9ksuz000427gx95ztax8o","_id":"clmn9ksv0000727gxbhg5cgc4"},{"name":"KrakenD","parent":"clmn9ksuy000227gxcotf2d2u","_id":"cm4cu0inn0002v60y5p9f415p"}],"Data":[{"_id":"widget","data":{"bottom":[{"name":"推薦 Blog","icon":"fas fa-blog","html":"<div><a href=\"https://hcluo.blogspot.com/\" target=\"_blank\">hcLuo Blog</a></div><div><a href=\"https://blog.leochen.dev/\" target=\"_blank\">Leo's Coding Life</a></div>"}]}}],"Page":[{"title":"關於我","date":"2023-09-09T08:19:22.000Z","_content":"\n<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center;\">\n  <div>\n    <img\n      src=\"/images/avatar.png\"\n      style=\"border-radius: 87.5px; max-width: 175px;\"\n    />\n  </div>\n  <div>我是 HAO，目前任職於台灣積體電路製造股份有限公司，擔任 IT Engineer。</div>\n</div>\n\n## 工作經歷\n**Full Time**\n*  **TSMC IT Engineer** - 2022/07 ~\n    -  **Senior TSMC IT Engineer** - 2024/07 ~\n    -  **TSMC IT Engineer** - 2022/07 ~ 2024/06\n*  **Vertiv Taiwan Software Engineer** - 2021/02 ~ 2022/06\n*  **Perkd Taiwan Full-Stack Developer** - 2020/07 ~ 2021/02\n*  **Perkd Taiwan Front-End Intern** - 2019/07 ~ 2019/12\n\n**Special**\n*  **HiSKIO Lecturer** - 2021/10 ~2022/10\n\n## 專業技能\n\n**Front-End**\n1. HTML5 / CSS3 / JavaScript / TypeScript\n2. Angular / React Hook / jQuery\n3. Angular Material / BootStrap\n4. Webpack\n\n**Back-End**\n1. Node.js\n2. Express / NestJS\n3. MongoDB / mongoose\n4. AWS Lambda + API Gateway\n\n**Tools**\n1. Nx\n2. Docker\n\n**BlockChain**\n1. Smart Contract / Solidity\n2. Go-ethereum\n3. Truffle\n4. Ganache\n5. web3.js / ethjs\n\n## 成就\n\n* 【2016】[第 56 屆全國中小學科學展覽會電腦與資訊學科](https://twsf.ntsec.gov.tw/activity/race-1/56/pdf/052508.pdf) - **佳作**\n* 【2018】[2018 Ai 機器人自造黑客松 - 南台灣挑戰賽](https://www.nkust.edu.tw/p/406-1000-8840,r12.php) - **總冠軍**\n* 【2018】[U-start 創新創業計畫 - 製造業組](https://ustart.yda.gov.tw/p/405-1000-1359,c112.php?Lang=zh-tw) - **績優團隊**\n* 【2019】[第 11 屆 iT 邦幫忙鐵人賽 - Blockchain](https://ithelp.ithome.com.tw/users/20119338/ironman/2150) - **佳作**\n* 【2020】[第 12 屆 iT 邦幫忙鐵人賽 - Software Development](https://ithelp.ithome.com.tw/users/20119338/ironman/3008) - **佳作**\n* 【2021】[第 13 屆 iT 邦幫忙鐵人賽 - Modern Web](https://ithelp.ithome.com.tw/users/20119338/ironman/3880) - **佳作**\n* 【2022】[著作 - NestJS 基礎必學實務指南：使用強大且易擴展的 Node.js 框架打造網頁應用程式](https://www.tenlong.com.tw/products/9786263332935)\n* 【2024】[第 16 屆 iT 邦幫忙鐵人賽 - Software Development](https://ithelp.ithome.com.tw/users/20119338/ironman/7743) - **優選**\n\n## 演講\n\n* 【2024】[TSMC IT Meetup - 擁抱 Angular Signal](https://tsmcitcommunitymeetup.kktix.cc/events/tsmc-it-meetup-taipei-02)\n* 【2024】[Hello World Dev Conference - NestJS 與 gRPC：快速上手指南](https://hwdc.ithome.com.tw/2024/session-page/3226)","source":"about/index.md","raw":"---\ntitle: 關於我\ndate: 2023-09-09 16:19:22\n---\n\n<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center;\">\n  <div>\n    <img\n      src=\"/images/avatar.png\"\n      style=\"border-radius: 87.5px; max-width: 175px;\"\n    />\n  </div>\n  <div>我是 HAO，目前任職於台灣積體電路製造股份有限公司，擔任 IT Engineer。</div>\n</div>\n\n## 工作經歷\n**Full Time**\n*  **TSMC IT Engineer** - 2022/07 ~\n    -  **Senior TSMC IT Engineer** - 2024/07 ~\n    -  **TSMC IT Engineer** - 2022/07 ~ 2024/06\n*  **Vertiv Taiwan Software Engineer** - 2021/02 ~ 2022/06\n*  **Perkd Taiwan Full-Stack Developer** - 2020/07 ~ 2021/02\n*  **Perkd Taiwan Front-End Intern** - 2019/07 ~ 2019/12\n\n**Special**\n*  **HiSKIO Lecturer** - 2021/10 ~2022/10\n\n## 專業技能\n\n**Front-End**\n1. HTML5 / CSS3 / JavaScript / TypeScript\n2. Angular / React Hook / jQuery\n3. Angular Material / BootStrap\n4. Webpack\n\n**Back-End**\n1. Node.js\n2. Express / NestJS\n3. MongoDB / mongoose\n4. AWS Lambda + API Gateway\n\n**Tools**\n1. Nx\n2. Docker\n\n**BlockChain**\n1. Smart Contract / Solidity\n2. Go-ethereum\n3. Truffle\n4. Ganache\n5. web3.js / ethjs\n\n## 成就\n\n* 【2016】[第 56 屆全國中小學科學展覽會電腦與資訊學科](https://twsf.ntsec.gov.tw/activity/race-1/56/pdf/052508.pdf) - **佳作**\n* 【2018】[2018 Ai 機器人自造黑客松 - 南台灣挑戰賽](https://www.nkust.edu.tw/p/406-1000-8840,r12.php) - **總冠軍**\n* 【2018】[U-start 創新創業計畫 - 製造業組](https://ustart.yda.gov.tw/p/405-1000-1359,c112.php?Lang=zh-tw) - **績優團隊**\n* 【2019】[第 11 屆 iT 邦幫忙鐵人賽 - Blockchain](https://ithelp.ithome.com.tw/users/20119338/ironman/2150) - **佳作**\n* 【2020】[第 12 屆 iT 邦幫忙鐵人賽 - Software Development](https://ithelp.ithome.com.tw/users/20119338/ironman/3008) - **佳作**\n* 【2021】[第 13 屆 iT 邦幫忙鐵人賽 - Modern Web](https://ithelp.ithome.com.tw/users/20119338/ironman/3880) - **佳作**\n* 【2022】[著作 - NestJS 基礎必學實務指南：使用強大且易擴展的 Node.js 框架打造網頁應用程式](https://www.tenlong.com.tw/products/9786263332935)\n* 【2024】[第 16 屆 iT 邦幫忙鐵人賽 - Software Development](https://ithelp.ithome.com.tw/users/20119338/ironman/7743) - **優選**\n\n## 演講\n\n* 【2024】[TSMC IT Meetup - 擁抱 Angular Signal](https://tsmcitcommunitymeetup.kktix.cc/events/tsmc-it-meetup-taipei-02)\n* 【2024】[Hello World Dev Conference - NestJS 與 gRPC：快速上手指南](https://hwdc.ithome.com.tw/2024/session-page/3226)","updated":"2025-01-11T14:15:09.310Z","path":"about/index.html","_id":"clmbr9ntm0000hygxbd40fazz","comments":1,"layout":"page","content":"<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center;\">\n  <div>\n    <img\n      src=\"/images/avatar.png\"\n      style=\"border-radius: 87.5px; max-width: 175px;\"\n    />\n  </div>\n  <div>我是 HAO，目前任職於台灣積體電路製造股份有限公司，擔任 IT Engineer。</div>\n</div>\n\n<h2 id=\"工作經歷\"><a href=\"#工作經歷\" class=\"headerlink\" title=\"工作經歷\"></a>工作經歷</h2><p><strong>Full Time</strong></p>\n<ul>\n<li><strong>TSMC IT Engineer</strong> - 2022&#x2F;07 ~<ul>\n<li><strong>Senior TSMC IT Engineer</strong> - 2024&#x2F;07 ~</li>\n<li><strong>TSMC IT Engineer</strong> - 2022&#x2F;07 ~ 2024&#x2F;06</li>\n</ul>\n</li>\n<li><strong>Vertiv Taiwan Software Engineer</strong> - 2021&#x2F;02 ~ 2022&#x2F;06</li>\n<li><strong>Perkd Taiwan Full-Stack Developer</strong> - 2020&#x2F;07 ~ 2021&#x2F;02</li>\n<li><strong>Perkd Taiwan Front-End Intern</strong> - 2019&#x2F;07 ~ 2019&#x2F;12</li>\n</ul>\n<p><strong>Special</strong></p>\n<ul>\n<li><strong>HiSKIO Lecturer</strong> - 2021&#x2F;10 ~2022&#x2F;10</li>\n</ul>\n<h2 id=\"專業技能\"><a href=\"#專業技能\" class=\"headerlink\" title=\"專業技能\"></a>專業技能</h2><p><strong>Front-End</strong></p>\n<ol>\n<li>HTML5 &#x2F; CSS3 &#x2F; JavaScript &#x2F; TypeScript</li>\n<li>Angular &#x2F; React Hook &#x2F; jQuery</li>\n<li>Angular Material &#x2F; BootStrap</li>\n<li>Webpack</li>\n</ol>\n<p><strong>Back-End</strong></p>\n<ol>\n<li>Node.js</li>\n<li>Express &#x2F; NestJS</li>\n<li>MongoDB &#x2F; mongoose</li>\n<li>AWS Lambda + API Gateway</li>\n</ol>\n<p><strong>Tools</strong></p>\n<ol>\n<li>Nx</li>\n<li>Docker</li>\n</ol>\n<p><strong>BlockChain</strong></p>\n<ol>\n<li>Smart Contract &#x2F; Solidity</li>\n<li>Go-ethereum</li>\n<li>Truffle</li>\n<li>Ganache</li>\n<li>web3.js &#x2F; ethjs</li>\n</ol>\n<h2 id=\"成就\"><a href=\"#成就\" class=\"headerlink\" title=\"成就\"></a>成就</h2><ul>\n<li>【2016】<a href=\"https://twsf.ntsec.gov.tw/activity/race-1/56/pdf/052508.pdf\">第 56 屆全國中小學科學展覽會電腦與資訊學科</a> - <strong>佳作</strong></li>\n<li>【2018】<a href=\"https://www.nkust.edu.tw/p/406-1000-8840,r12.php\">2018 Ai 機器人自造黑客松 - 南台灣挑戰賽</a> - <strong>總冠軍</strong></li>\n<li>【2018】<a href=\"https://ustart.yda.gov.tw/p/405-1000-1359,c112.php?Lang=zh-tw\">U-start 創新創業計畫 - 製造業組</a> - <strong>績優團隊</strong></li>\n<li>【2019】<a href=\"https://ithelp.ithome.com.tw/users/20119338/ironman/2150\">第 11 屆 iT 邦幫忙鐵人賽 - Blockchain</a> - <strong>佳作</strong></li>\n<li>【2020】<a href=\"https://ithelp.ithome.com.tw/users/20119338/ironman/3008\">第 12 屆 iT 邦幫忙鐵人賽 - Software Development</a> - <strong>佳作</strong></li>\n<li>【2021】<a href=\"https://ithelp.ithome.com.tw/users/20119338/ironman/3880\">第 13 屆 iT 邦幫忙鐵人賽 - Modern Web</a> - <strong>佳作</strong></li>\n<li>【2022】<a href=\"https://www.tenlong.com.tw/products/9786263332935\">著作 - NestJS 基礎必學實務指南：使用強大且易擴展的 Node.js 框架打造網頁應用程式</a></li>\n<li>【2024】<a href=\"https://ithelp.ithome.com.tw/users/20119338/ironman/7743\">第 16 屆 iT 邦幫忙鐵人賽 - Software Development</a> - <strong>優選</strong></li>\n</ul>\n<h2 id=\"演講\"><a href=\"#演講\" class=\"headerlink\" title=\"演講\"></a>演講</h2><ul>\n<li>【2024】<a href=\"https://tsmcitcommunitymeetup.kktix.cc/events/tsmc-it-meetup-taipei-02\">TSMC IT Meetup - 擁抱 Angular Signal</a></li>\n<li>【2024】<a href=\"https://hwdc.ithome.com.tw/2024/session-page/3226\">Hello World Dev Conference - NestJS 與 gRPC：快速上手指南</a></li>\n</ul>\n","site":{"data":{"widget":{"bottom":[{"name":"推薦 Blog","icon":"fas fa-blog","html":"<div><a href=\"https://hcluo.blogspot.com/\" target=\"_blank\">hcLuo Blog</a></div><div><a href=\"https://blog.leochen.dev/\" target=\"_blank\">Leo's Coding Life</a></div>"}]}}},"cover":false,"excerpt":"","more":"<div style=\"display: flex; flex-direction: column; justify-content: center; align-items: center;\">\n  <div>\n    <img\n      src=\"/images/avatar.png\"\n      style=\"border-radius: 87.5px; max-width: 175px;\"\n    />\n  </div>\n  <div>我是 HAO，目前任職於台灣積體電路製造股份有限公司，擔任 IT Engineer。</div>\n</div>\n\n<h2 id=\"工作經歷\"><a href=\"#工作經歷\" class=\"headerlink\" title=\"工作經歷\"></a>工作經歷</h2><p><strong>Full Time</strong></p>\n<ul>\n<li><strong>TSMC IT Engineer</strong> - 2022&#x2F;07 ~<ul>\n<li><strong>Senior TSMC IT Engineer</strong> - 2024&#x2F;07 ~</li>\n<li><strong>TSMC IT Engineer</strong> - 2022&#x2F;07 ~ 2024&#x2F;06</li>\n</ul>\n</li>\n<li><strong>Vertiv Taiwan Software Engineer</strong> - 2021&#x2F;02 ~ 2022&#x2F;06</li>\n<li><strong>Perkd Taiwan Full-Stack Developer</strong> - 2020&#x2F;07 ~ 2021&#x2F;02</li>\n<li><strong>Perkd Taiwan Front-End Intern</strong> - 2019&#x2F;07 ~ 2019&#x2F;12</li>\n</ul>\n<p><strong>Special</strong></p>\n<ul>\n<li><strong>HiSKIO Lecturer</strong> - 2021&#x2F;10 ~2022&#x2F;10</li>\n</ul>\n<h2 id=\"專業技能\"><a href=\"#專業技能\" class=\"headerlink\" title=\"專業技能\"></a>專業技能</h2><p><strong>Front-End</strong></p>\n<ol>\n<li>HTML5 &#x2F; CSS3 &#x2F; JavaScript &#x2F; TypeScript</li>\n<li>Angular &#x2F; React Hook &#x2F; jQuery</li>\n<li>Angular Material &#x2F; BootStrap</li>\n<li>Webpack</li>\n</ol>\n<p><strong>Back-End</strong></p>\n<ol>\n<li>Node.js</li>\n<li>Express &#x2F; NestJS</li>\n<li>MongoDB &#x2F; mongoose</li>\n<li>AWS Lambda + API Gateway</li>\n</ol>\n<p><strong>Tools</strong></p>\n<ol>\n<li>Nx</li>\n<li>Docker</li>\n</ol>\n<p><strong>BlockChain</strong></p>\n<ol>\n<li>Smart Contract &#x2F; Solidity</li>\n<li>Go-ethereum</li>\n<li>Truffle</li>\n<li>Ganache</li>\n<li>web3.js &#x2F; ethjs</li>\n</ol>\n<h2 id=\"成就\"><a href=\"#成就\" class=\"headerlink\" title=\"成就\"></a>成就</h2><ul>\n<li>【2016】<a href=\"https://twsf.ntsec.gov.tw/activity/race-1/56/pdf/052508.pdf\">第 56 屆全國中小學科學展覽會電腦與資訊學科</a> - <strong>佳作</strong></li>\n<li>【2018】<a href=\"https://www.nkust.edu.tw/p/406-1000-8840,r12.php\">2018 Ai 機器人自造黑客松 - 南台灣挑戰賽</a> - <strong>總冠軍</strong></li>\n<li>【2018】<a href=\"https://ustart.yda.gov.tw/p/405-1000-1359,c112.php?Lang=zh-tw\">U-start 創新創業計畫 - 製造業組</a> - <strong>績優團隊</strong></li>\n<li>【2019】<a href=\"https://ithelp.ithome.com.tw/users/20119338/ironman/2150\">第 11 屆 iT 邦幫忙鐵人賽 - Blockchain</a> - <strong>佳作</strong></li>\n<li>【2020】<a href=\"https://ithelp.ithome.com.tw/users/20119338/ironman/3008\">第 12 屆 iT 邦幫忙鐵人賽 - Software Development</a> - <strong>佳作</strong></li>\n<li>【2021】<a href=\"https://ithelp.ithome.com.tw/users/20119338/ironman/3880\">第 13 屆 iT 邦幫忙鐵人賽 - Modern Web</a> - <strong>佳作</strong></li>\n<li>【2022】<a href=\"https://www.tenlong.com.tw/products/9786263332935\">著作 - NestJS 基礎必學實務指南：使用強大且易擴展的 Node.js 框架打造網頁應用程式</a></li>\n<li>【2024】<a href=\"https://ithelp.ithome.com.tw/users/20119338/ironman/7743\">第 16 屆 iT 邦幫忙鐵人賽 - Software Development</a> - <strong>優選</strong></li>\n</ul>\n<h2 id=\"演講\"><a href=\"#演講\" class=\"headerlink\" title=\"演講\"></a>演講</h2><ul>\n<li>【2024】<a href=\"https://tsmcitcommunitymeetup.kktix.cc/events/tsmc-it-meetup-taipei-02\">TSMC IT Meetup - 擁抱 Angular Signal</a></li>\n<li>【2024】<a href=\"https://hwdc.ithome.com.tw/2024/session-page/3226\">Hello World Dev Conference - NestJS 與 gRPC：快速上手指南</a></li>\n</ul>\n"},{"title":"標籤","date":"2023-09-09T09:20:38.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 標籤\ndate: 2023-09-09 17:20:38\ntype: \"tags\"\n---\n","updated":"2023-09-09T09:22:04.021Z","path":"tags/index.html","_id":"clmbtfybt000020gx44zz5uo7","comments":1,"layout":"page","content":"","site":{"data":{"widget":{"bottom":[{"name":"推薦 Blog","icon":"fas fa-blog","html":"<div><a href=\"https://hcluo.blogspot.com/\" target=\"_blank\">hcLuo Blog</a></div><div><a href=\"https://blog.leochen.dev/\" target=\"_blank\">Leo's Coding Life</a></div>"}]}}},"cover":false,"excerpt":"","more":""},{"title":"分類","date":"2023-09-09T09:21:14.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分類\ndate: 2023-09-09 17:21:14\ntype: \"categories\"\n---\n","updated":"2023-09-09T09:21:57.517Z","path":"categories/index.html","_id":"clmbtgq7z000120gx90z77f9b","comments":1,"layout":"page","content":"","site":{"data":{"widget":{"bottom":[{"name":"推薦 Blog","icon":"fas fa-blog","html":"<div><a href=\"https://hcluo.blogspot.com/\" target=\"_blank\">hcLuo Blog</a></div><div><a href=\"https://blog.leochen.dev/\" target=\"_blank\">Leo's Coding Life</a></div>"}]}}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"動態載入 Web Component","date":"2023-09-10T12:47:00.000Z","_content":"\n## 什麼是 Web Component？\n\nWeb Component 是一個封裝自定義元件的技術，讓我們可以輕易地在不同應用程式中重用這些被封裝的元件，\n不僅如此，Web Component 不限定應用程式使用的框架或函式庫，不論今天是 Angular 或 React，甚至是 Vanilla JavaScript 都能夠輕鬆使用。\n\n> **INFO**：關於 Web Component 的詳細資訊可以參考 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components)。\n\n\n## 為什麼需要 Web Component？\n\nWeb Component 的問世，可以實現較理想的 **微前端（Micro Frontend）** 概念，在過去，會以 iframe 的形式將其他團隊開發的元件、頁面嵌入至自己的系統內來實現微前端，但這樣的做法會有很多的限制，比如：跨域、生命週期等。\n\n透過 Web Component 則可以避免這些問題，因為概念上就是將其他團隊開發的元件程式碼嵌入並串接至自己的系統裡。\n\n> **NOTE**：微前端也可以用 Module Federation 技術來實作，有興趣的話，可以參考[相關文件](https://webpack.js.org/concepts/module-federation/)。\n\n## 動態載入 Web Component\n\n目前常見的 Web Component 套用方式是將該元件推至 registry，提供給其他開發者安裝，甚至會針對不同的前端框架進行封裝，進而讓使用各種框架的開發者都可以用更貼近框架的做法來使用這些元件。\n\n<img\n  style=\"max-width: 500px;\"\n  src=\"web-component-for-framework.png\"\n  alt=\"Web Component For Framework\"\n/>\n\n在某些情境下，我們可能會希望以 **動態（Dynamic）** 的方式將 Web Component 載入至自己的系統內使用，甚至能夠永遠使用最新版的元件，在這種較極端的情境下，就要實作一套機制來達到動態載入的效果。\n\n### 流程設計\n\n以下是一個很簡單的實現流程：\n\n1. Web Component 編譯後的 Chunk 掛在 CDN 上\n2. 應用程式透過 API 或設定檔取得 Web Component 的 url\n3. 透過 Loader 將 Chunk 載入\n4. 使用 Web Component\n\n<img\n  style=\"max-width: 500px;\"\n  src=\"web-component-dynamic-loader.png\"\n  alt=\"Web Component Dynamic Loader\"\n/>\n\n### 實作\n\n根據流程設計可以得知，動態載入 Web Component 的關鍵點在於取得 Web Component Chunk 的 url 並透過某種 Loader 來將該 Chunk 載入，這裡 **僅會針對這段進行實作，其餘細節將會省略**。\n\n> **NOTE**：以下實作會以 Angular 16 當作範例。\n\n為了簡化實作範疇，這裡採用設定檔的方式來設定 Web Component Chunk 的 url，Web Component 的 Chunk 也會放在 `assets` 資料夾內，以下是設定檔 `config.json` 的內容：\n```json\n{\n  \"webComponents\": [\n    {\n      \"id\": \"rainbow-block\",\n      \"source\": \"assets/webComponents/rainbow-block.js\"\n    }\n  ]\n}\n```\n設定檔內定義了 `webComponents`欄位告訴應用程式有哪些 Web Component 需要載入，資料結構為陣列，裡面每個元素會定義 `id` 與 `source` 來註記該 Web Component Chunk 的 `id` 與 url。\n\n設置完 `config.json` 後，在專案內建立 `web-component-dynamic-loader.service.ts` 來實現動態載入 Web Component：\n```typescript\n// ...\n@Injectable({ providedIn: 'root' })\nexport class WebComponentDynamicLoaderService {\n  // 注入 document\n  private readonly _document = inject(DOCUMENT);\n\n  load(id: string, source: string) {\n    const script = this._document.createElement('script');\n\n    // 如果相同的 Web Component Chunk 已經載入，則不須做任何事\n    if (this._document.getElementById(id)) {\n      return of(null);\n    }\n\n    script.src = source;\n    script.id = id;\n\n    this._document.head.appendChild(script);\n\n    // 聽 script 的 onload 事件\n    return fromEvent<null>(script, 'load').pipe(\n      map(() => null),\n      take(1)\n    );\n  }\n}\n```\n\n實作 `ConfigStore` 存放 `config.json` 的內容：\n```typescript\n// ...\nexport interface Config {\n  webComponents: { id: string; source: string }[];\n}\n\nconst isNotNull = <T>(config: T | null): config is NonNullable<T> =>\n  config !== null;\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigStore {\n  private readonly _config$ = new BehaviorSubject<Config | null>(null);\n  readonly config$ = this._config$.pipe(filter(isNotNull));\n\n  private readonly httpClient = inject(HttpClient);\n\n  // 用於 APP_INITIALIZER\n  loadConfig() {\n    return () => {\n      return this.httpClient.get<Config>('assets/config.json').pipe(\n        tap((config) => {\n          this._config$.next(config);\n        })\n      );\n    };\n  }\n}\n```\n\n接著，在 `app.config.ts` 透過 `APP_INITIALIZER` 取得 `config.json` 的內容，並在此載入 Web Component：\n```typescript\n// ...\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: (configStore: ConfigStore) => {\n        // 載入 config.json 並存入 ConfigStore 裡\n        return configStore.loadConfig();\n      },\n      deps: [ConfigStore],\n      multi: true,\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: (\n        configStore: ConfigStore,\n        loader: WebComponentDynamicLoaderService\n      ) => {\n        return () => {\n          return configStore.config$.pipe(\n            take(1),\n            // 當 config.json 內容載入後，會根據設定內容來載入 Web Component Chunk\n            concatMap((config) => from(config.webComponents)),\n            mergeMap(({ id, source }) => loader.load(id, source)),\n            toArray()\n          );\n        };\n      },\n      deps: [ConfigStore, WebComponentDynamicLoaderService],\n      multi: true,\n    },\n    // ...\n  ],\n};\n```\n如此一來，便可以用動態的方式將 Web Component 載入。\n\n> **NOTE**：實作結果可以 clone [這個專案](https://github.com/hao0731/angular-dynamic-load-web-component)玩玩看。","source":"_posts/0001-dynamic-load-web-component.md","raw":"---\ntitle: 動態載入 Web Component\ndate: 2023-09-10 20:47:00\ntags:\n  - Frontend\n  - Angular\n  - Web Component\ncategories:\n  - ['Frontend', 'Web Component']\n---\n\n## 什麼是 Web Component？\n\nWeb Component 是一個封裝自定義元件的技術，讓我們可以輕易地在不同應用程式中重用這些被封裝的元件，\n不僅如此，Web Component 不限定應用程式使用的框架或函式庫，不論今天是 Angular 或 React，甚至是 Vanilla JavaScript 都能夠輕鬆使用。\n\n> **INFO**：關於 Web Component 的詳細資訊可以參考 [MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components)。\n\n\n## 為什麼需要 Web Component？\n\nWeb Component 的問世，可以實現較理想的 **微前端（Micro Frontend）** 概念，在過去，會以 iframe 的形式將其他團隊開發的元件、頁面嵌入至自己的系統內來實現微前端，但這樣的做法會有很多的限制，比如：跨域、生命週期等。\n\n透過 Web Component 則可以避免這些問題，因為概念上就是將其他團隊開發的元件程式碼嵌入並串接至自己的系統裡。\n\n> **NOTE**：微前端也可以用 Module Federation 技術來實作，有興趣的話，可以參考[相關文件](https://webpack.js.org/concepts/module-federation/)。\n\n## 動態載入 Web Component\n\n目前常見的 Web Component 套用方式是將該元件推至 registry，提供給其他開發者安裝，甚至會針對不同的前端框架進行封裝，進而讓使用各種框架的開發者都可以用更貼近框架的做法來使用這些元件。\n\n<img\n  style=\"max-width: 500px;\"\n  src=\"web-component-for-framework.png\"\n  alt=\"Web Component For Framework\"\n/>\n\n在某些情境下，我們可能會希望以 **動態（Dynamic）** 的方式將 Web Component 載入至自己的系統內使用，甚至能夠永遠使用最新版的元件，在這種較極端的情境下，就要實作一套機制來達到動態載入的效果。\n\n### 流程設計\n\n以下是一個很簡單的實現流程：\n\n1. Web Component 編譯後的 Chunk 掛在 CDN 上\n2. 應用程式透過 API 或設定檔取得 Web Component 的 url\n3. 透過 Loader 將 Chunk 載入\n4. 使用 Web Component\n\n<img\n  style=\"max-width: 500px;\"\n  src=\"web-component-dynamic-loader.png\"\n  alt=\"Web Component Dynamic Loader\"\n/>\n\n### 實作\n\n根據流程設計可以得知，動態載入 Web Component 的關鍵點在於取得 Web Component Chunk 的 url 並透過某種 Loader 來將該 Chunk 載入，這裡 **僅會針對這段進行實作，其餘細節將會省略**。\n\n> **NOTE**：以下實作會以 Angular 16 當作範例。\n\n為了簡化實作範疇，這裡採用設定檔的方式來設定 Web Component Chunk 的 url，Web Component 的 Chunk 也會放在 `assets` 資料夾內，以下是設定檔 `config.json` 的內容：\n```json\n{\n  \"webComponents\": [\n    {\n      \"id\": \"rainbow-block\",\n      \"source\": \"assets/webComponents/rainbow-block.js\"\n    }\n  ]\n}\n```\n設定檔內定義了 `webComponents`欄位告訴應用程式有哪些 Web Component 需要載入，資料結構為陣列，裡面每個元素會定義 `id` 與 `source` 來註記該 Web Component Chunk 的 `id` 與 url。\n\n設置完 `config.json` 後，在專案內建立 `web-component-dynamic-loader.service.ts` 來實現動態載入 Web Component：\n```typescript\n// ...\n@Injectable({ providedIn: 'root' })\nexport class WebComponentDynamicLoaderService {\n  // 注入 document\n  private readonly _document = inject(DOCUMENT);\n\n  load(id: string, source: string) {\n    const script = this._document.createElement('script');\n\n    // 如果相同的 Web Component Chunk 已經載入，則不須做任何事\n    if (this._document.getElementById(id)) {\n      return of(null);\n    }\n\n    script.src = source;\n    script.id = id;\n\n    this._document.head.appendChild(script);\n\n    // 聽 script 的 onload 事件\n    return fromEvent<null>(script, 'load').pipe(\n      map(() => null),\n      take(1)\n    );\n  }\n}\n```\n\n實作 `ConfigStore` 存放 `config.json` 的內容：\n```typescript\n// ...\nexport interface Config {\n  webComponents: { id: string; source: string }[];\n}\n\nconst isNotNull = <T>(config: T | null): config is NonNullable<T> =>\n  config !== null;\n\n@Injectable({ providedIn: 'root' })\nexport class ConfigStore {\n  private readonly _config$ = new BehaviorSubject<Config | null>(null);\n  readonly config$ = this._config$.pipe(filter(isNotNull));\n\n  private readonly httpClient = inject(HttpClient);\n\n  // 用於 APP_INITIALIZER\n  loadConfig() {\n    return () => {\n      return this.httpClient.get<Config>('assets/config.json').pipe(\n        tap((config) => {\n          this._config$.next(config);\n        })\n      );\n    };\n  }\n}\n```\n\n接著，在 `app.config.ts` 透過 `APP_INITIALIZER` 取得 `config.json` 的內容，並在此載入 Web Component：\n```typescript\n// ...\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: (configStore: ConfigStore) => {\n        // 載入 config.json 並存入 ConfigStore 裡\n        return configStore.loadConfig();\n      },\n      deps: [ConfigStore],\n      multi: true,\n    },\n    {\n      provide: APP_INITIALIZER,\n      useFactory: (\n        configStore: ConfigStore,\n        loader: WebComponentDynamicLoaderService\n      ) => {\n        return () => {\n          return configStore.config$.pipe(\n            take(1),\n            // 當 config.json 內容載入後，會根據設定內容來載入 Web Component Chunk\n            concatMap((config) => from(config.webComponents)),\n            mergeMap(({ id, source }) => loader.load(id, source)),\n            toArray()\n          );\n        };\n      },\n      deps: [ConfigStore, WebComponentDynamicLoaderService],\n      multi: true,\n    },\n    // ...\n  ],\n};\n```\n如此一來，便可以用動態的方式將 Web Component 載入。\n\n> **NOTE**：實作結果可以 clone [這個專案](https://github.com/hao0731/angular-dynamic-load-web-component)玩玩看。","slug":"0001-dynamic-load-web-component","published":1,"updated":"2023-09-10T12:47:59.398Z","_id":"clmdg2qna00007tgx683k9vkw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什麼是-Web-Component？\"><a href=\"#什麼是-Web-Component？\" class=\"headerlink\" title=\"什麼是 Web Component？\"></a>什麼是 Web Component？</h2><p>Web Component 是一個封裝自定義元件的技術，讓我們可以輕易地在不同應用程式中重用這些被封裝的元件，<br>不僅如此，Web Component 不限定應用程式使用的框架或函式庫，不論今天是 Angular 或 React，甚至是 Vanilla JavaScript 都能夠輕鬆使用。</p>\n<blockquote>\n<p><strong>INFO</strong>：關於 Web Component 的詳細資訊可以參考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components\">MDN</a>。</p>\n</blockquote>\n<h2 id=\"為什麼需要-Web-Component？\"><a href=\"#為什麼需要-Web-Component？\" class=\"headerlink\" title=\"為什麼需要 Web Component？\"></a>為什麼需要 Web Component？</h2><p>Web Component 的問世，可以實現較理想的 <strong>微前端（Micro Frontend）</strong> 概念，在過去，會以 iframe 的形式將其他團隊開發的元件、頁面嵌入至自己的系統內來實現微前端，但這樣的做法會有很多的限制，比如：跨域、生命週期等。</p>\n<p>透過 Web Component 則可以避免這些問題，因為概念上就是將其他團隊開發的元件程式碼嵌入並串接至自己的系統裡。</p>\n<blockquote>\n<p><strong>NOTE</strong>：微前端也可以用 Module Federation 技術來實作，有興趣的話，可以參考<a href=\"https://webpack.js.org/concepts/module-federation/\">相關文件</a>。</p>\n</blockquote>\n<h2 id=\"動態載入-Web-Component\"><a href=\"#動態載入-Web-Component\" class=\"headerlink\" title=\"動態載入 Web Component\"></a>動態載入 Web Component</h2><p>目前常見的 Web Component 套用方式是將該元件推至 registry，提供給其他開發者安裝，甚至會針對不同的前端框架進行封裝，進而讓使用各種框架的開發者都可以用更貼近框架的做法來使用這些元件。</p>\n<p><img\n  style=\"max-width: 500px;\"\n  src=\"web-component-for-framework.png\"\n  alt=\"Web Component For Framework\"\n/></p>\n<p>在某些情境下，我們可能會希望以 <strong>動態（Dynamic）</strong> 的方式將 Web Component 載入至自己的系統內使用，甚至能夠永遠使用最新版的元件，在這種較極端的情境下，就要實作一套機制來達到動態載入的效果。</p>\n<h3 id=\"流程設計\"><a href=\"#流程設計\" class=\"headerlink\" title=\"流程設計\"></a>流程設計</h3><p>以下是一個很簡單的實現流程：</p>\n<ol>\n<li>Web Component 編譯後的 Chunk 掛在 CDN 上</li>\n<li>應用程式透過 API 或設定檔取得 Web Component 的 url</li>\n<li>透過 Loader 將 Chunk 載入</li>\n<li>使用 Web Component</li>\n</ol>\n<p><img\n  style=\"max-width: 500px;\"\n  src=\"web-component-dynamic-loader.png\"\n  alt=\"Web Component Dynamic Loader\"\n/></p>\n<h3 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h3><p>根據流程設計可以得知，動態載入 Web Component 的關鍵點在於取得 Web Component Chunk 的 url 並透過某種 Loader 來將該 Chunk 載入，這裡 <strong>僅會針對這段進行實作，其餘細節將會省略</strong>。</p>\n<blockquote>\n<p><strong>NOTE</strong>：以下實作會以 Angular 16 當作範例。</p>\n</blockquote>\n<p>為了簡化實作範疇，這裡採用設定檔的方式來設定 Web Component Chunk 的 url，Web Component 的 Chunk 也會放在 <code>assets</code> 資料夾內，以下是設定檔 <code>config.json</code> 的內容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;webComponents&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rainbow-block&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;source&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;assets/webComponents/rainbow-block.js&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>設定檔內定義了 <code>webComponents</code>欄位告訴應用程式有哪些 Web Component 需要載入，資料結構為陣列，裡面每個元素會定義 <code>id</code> 與 <code>source</code> 來註記該 Web Component Chunk 的 <code>id</code> 與 url。</p>\n<p>設置完 <code>config.json</code> 後，在專案內建立 <code>web-component-dynamic-loader.service.ts</code> 來實現動態載入 Web Component：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123; <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebComponentDynamicLoaderService</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注入 document</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> _document = <span class=\"title function_\">inject</span>(<span class=\"variable constant_\">DOCUMENT</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">load</span>(<span class=\"params\">id: <span class=\"built_in\">string</span>, source: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> script = <span class=\"variable language_\">this</span>.<span class=\"property\">_document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果相同的 Web Component Chunk 已經載入，則不須做任何事</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_document</span>.<span class=\"title function_\">getElementById</span>(id)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">of</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    script.<span class=\"property\">src</span> = source;</span><br><span class=\"line\">    script.<span class=\"property\">id</span> = id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_document</span>.<span class=\"property\">head</span>.<span class=\"title function_\">appendChild</span>(script);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 聽 script 的 onload 事件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fromEvent&lt;<span class=\"literal\">null</span>&gt;(script, <span class=\"string\">&#x27;load&#x27;</span>).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">      <span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"literal\">null</span>),</span><br><span class=\"line\">      <span class=\"title function_\">take</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>實作 <code>ConfigStore</code> 存放 <code>config.json</code> 的內容：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">webComponents</span>: &#123; <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">source</span>: <span class=\"built_in\">string</span> &#125;[];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isNotNull = &lt;T&gt;(<span class=\"attr\">config</span>: T | <span class=\"literal\">null</span>): config is <span class=\"title class_\">NonNullable</span>&lt;T&gt; =&gt;</span><br><span class=\"line\">  config !== <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123; <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigStore</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> _config$ = <span class=\"keyword\">new</span> <span class=\"title class_\">BehaviorSubject</span>&lt;<span class=\"title class_\">Config</span> | <span class=\"literal\">null</span>&gt;(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> config$ = <span class=\"variable language_\">this</span>.<span class=\"property\">_config$</span>.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">filter</span>(isNotNull));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> httpClient = <span class=\"title function_\">inject</span>(<span class=\"title class_\">HttpClient</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用於 APP_INITIALIZER</span></span><br><span class=\"line\">  <span class=\"title function_\">loadConfig</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">get</span>&lt;<span class=\"title class_\">Config</span>&gt;(<span class=\"string\">&#x27;assets/config.json&#x27;</span>).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">        <span class=\"title function_\">tap</span>(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">_config$</span>.<span class=\"title function_\">next</span>(config);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著，在 <code>app.config.ts</code> 透過 <code>APP_INITIALIZER</code> 取得 <code>config.json</code> 的內容，並在此載入 Web Component：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">appConfig</span>: <span class=\"title class_\">ApplicationConfig</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_INITIALIZER</span>,</span><br><span class=\"line\">      <span class=\"attr\">useFactory</span>: <span class=\"function\">(<span class=\"params\">configStore: ConfigStore</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 載入 config.json 並存入 ConfigStore 裡</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> configStore.<span class=\"title function_\">loadConfig</span>();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">deps</span>: [<span class=\"title class_\">ConfigStore</span>],</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_INITIALIZER</span>,</span><br><span class=\"line\">      <span class=\"attr\">useFactory</span>: <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        configStore: ConfigStore,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        loader: WebComponentDynamicLoaderService</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      </span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> configStore.<span class=\"property\">config$</span>.<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">            <span class=\"title function_\">take</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">            <span class=\"comment\">// 當 config.json 內容載入後，會根據設定內容來載入 Web Component Chunk</span></span><br><span class=\"line\">            <span class=\"title function_\">concatMap</span>(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> <span class=\"title function_\">from</span>(config.<span class=\"property\">webComponents</span>)),</span><br><span class=\"line\">            <span class=\"title function_\">mergeMap</span>(<span class=\"function\">(<span class=\"params\">&#123; id, source &#125;</span>) =&gt;</span> loader.<span class=\"title function_\">load</span>(id, source)),</span><br><span class=\"line\">            <span class=\"title function_\">toArray</span>()</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">deps</span>: [<span class=\"title class_\">ConfigStore</span>, <span class=\"title class_\">WebComponentDynamicLoaderService</span>],</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>如此一來，便可以用動態的方式將 Web Component 載入。</p>\n<blockquote>\n<p><strong>NOTE</strong>：實作結果可以 clone <a href=\"https://github.com/hao0731/angular-dynamic-load-web-component\">這個專案</a>玩玩看。</p>\n</blockquote>\n","site":{"data":{"widget":{"bottom":[{"name":"推薦 Blog","icon":"fas fa-blog","html":"<div><a href=\"https://hcluo.blogspot.com/\" target=\"_blank\">hcLuo Blog</a></div><div><a href=\"https://blog.leochen.dev/\" target=\"_blank\">Leo's Coding Life</a></div>"}]}}},"cover":false,"excerpt":"","more":"<h2 id=\"什麼是-Web-Component？\"><a href=\"#什麼是-Web-Component？\" class=\"headerlink\" title=\"什麼是 Web Component？\"></a>什麼是 Web Component？</h2><p>Web Component 是一個封裝自定義元件的技術，讓我們可以輕易地在不同應用程式中重用這些被封裝的元件，<br>不僅如此，Web Component 不限定應用程式使用的框架或函式庫，不論今天是 Angular 或 React，甚至是 Vanilla JavaScript 都能夠輕鬆使用。</p>\n<blockquote>\n<p><strong>INFO</strong>：關於 Web Component 的詳細資訊可以參考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components\">MDN</a>。</p>\n</blockquote>\n<h2 id=\"為什麼需要-Web-Component？\"><a href=\"#為什麼需要-Web-Component？\" class=\"headerlink\" title=\"為什麼需要 Web Component？\"></a>為什麼需要 Web Component？</h2><p>Web Component 的問世，可以實現較理想的 <strong>微前端（Micro Frontend）</strong> 概念，在過去，會以 iframe 的形式將其他團隊開發的元件、頁面嵌入至自己的系統內來實現微前端，但這樣的做法會有很多的限制，比如：跨域、生命週期等。</p>\n<p>透過 Web Component 則可以避免這些問題，因為概念上就是將其他團隊開發的元件程式碼嵌入並串接至自己的系統裡。</p>\n<blockquote>\n<p><strong>NOTE</strong>：微前端也可以用 Module Federation 技術來實作，有興趣的話，可以參考<a href=\"https://webpack.js.org/concepts/module-federation/\">相關文件</a>。</p>\n</blockquote>\n<h2 id=\"動態載入-Web-Component\"><a href=\"#動態載入-Web-Component\" class=\"headerlink\" title=\"動態載入 Web Component\"></a>動態載入 Web Component</h2><p>目前常見的 Web Component 套用方式是將該元件推至 registry，提供給其他開發者安裝，甚至會針對不同的前端框架進行封裝，進而讓使用各種框架的開發者都可以用更貼近框架的做法來使用這些元件。</p>\n<p><img\n  style=\"max-width: 500px;\"\n  src=\"web-component-for-framework.png\"\n  alt=\"Web Component For Framework\"\n/></p>\n<p>在某些情境下，我們可能會希望以 <strong>動態（Dynamic）</strong> 的方式將 Web Component 載入至自己的系統內使用，甚至能夠永遠使用最新版的元件，在這種較極端的情境下，就要實作一套機制來達到動態載入的效果。</p>\n<h3 id=\"流程設計\"><a href=\"#流程設計\" class=\"headerlink\" title=\"流程設計\"></a>流程設計</h3><p>以下是一個很簡單的實現流程：</p>\n<ol>\n<li>Web Component 編譯後的 Chunk 掛在 CDN 上</li>\n<li>應用程式透過 API 或設定檔取得 Web Component 的 url</li>\n<li>透過 Loader 將 Chunk 載入</li>\n<li>使用 Web Component</li>\n</ol>\n<p><img\n  style=\"max-width: 500px;\"\n  src=\"web-component-dynamic-loader.png\"\n  alt=\"Web Component Dynamic Loader\"\n/></p>\n<h3 id=\"實作\"><a href=\"#實作\" class=\"headerlink\" title=\"實作\"></a>實作</h3><p>根據流程設計可以得知，動態載入 Web Component 的關鍵點在於取得 Web Component Chunk 的 url 並透過某種 Loader 來將該 Chunk 載入，這裡 <strong>僅會針對這段進行實作，其餘細節將會省略</strong>。</p>\n<blockquote>\n<p><strong>NOTE</strong>：以下實作會以 Angular 16 當作範例。</p>\n</blockquote>\n<p>為了簡化實作範疇，這裡採用設定檔的方式來設定 Web Component Chunk 的 url，Web Component 的 Chunk 也會放在 <code>assets</code> 資料夾內，以下是設定檔 <code>config.json</code> 的內容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;webComponents&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;rainbow-block&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;source&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;assets/webComponents/rainbow-block.js&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>設定檔內定義了 <code>webComponents</code>欄位告訴應用程式有哪些 Web Component 需要載入，資料結構為陣列，裡面每個元素會定義 <code>id</code> 與 <code>source</code> 來註記該 Web Component Chunk 的 <code>id</code> 與 url。</p>\n<p>設置完 <code>config.json</code> 後，在專案內建立 <code>web-component-dynamic-loader.service.ts</code> 來實現動態載入 Web Component：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123; <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebComponentDynamicLoaderService</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 注入 document</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> _document = <span class=\"title function_\">inject</span>(<span class=\"variable constant_\">DOCUMENT</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">load</span>(<span class=\"params\">id: <span class=\"built_in\">string</span>, source: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> script = <span class=\"variable language_\">this</span>.<span class=\"property\">_document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果相同的 Web Component Chunk 已經載入，則不須做任何事</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">_document</span>.<span class=\"title function_\">getElementById</span>(id)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title function_\">of</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    script.<span class=\"property\">src</span> = source;</span><br><span class=\"line\">    script.<span class=\"property\">id</span> = id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_document</span>.<span class=\"property\">head</span>.<span class=\"title function_\">appendChild</span>(script);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 聽 script 的 onload 事件</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fromEvent&lt;<span class=\"literal\">null</span>&gt;(script, <span class=\"string\">&#x27;load&#x27;</span>).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">      <span class=\"title function_\">map</span>(<span class=\"function\">() =&gt;</span> <span class=\"literal\">null</span>),</span><br><span class=\"line\">      <span class=\"title function_\">take</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>實作 <code>ConfigStore</code> 存放 <code>config.json</code> 的內容：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Config</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">webComponents</span>: &#123; <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">source</span>: <span class=\"built_in\">string</span> &#125;[];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isNotNull = &lt;T&gt;(<span class=\"attr\">config</span>: T | <span class=\"literal\">null</span>): config is <span class=\"title class_\">NonNullable</span>&lt;T&gt; =&gt;</span><br><span class=\"line\">  config !== <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123; <span class=\"attr\">providedIn</span>: <span class=\"string\">&#x27;root&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConfigStore</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> _config$ = <span class=\"keyword\">new</span> <span class=\"title class_\">BehaviorSubject</span>&lt;<span class=\"title class_\">Config</span> | <span class=\"literal\">null</span>&gt;(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> config$ = <span class=\"variable language_\">this</span>.<span class=\"property\">_config$</span>.<span class=\"title function_\">pipe</span>(<span class=\"title function_\">filter</span>(isNotNull));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> httpClient = <span class=\"title function_\">inject</span>(<span class=\"title class_\">HttpClient</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 用於 APP_INITIALIZER</span></span><br><span class=\"line\">  <span class=\"title function_\">loadConfig</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">httpClient</span>.<span class=\"property\">get</span>&lt;<span class=\"title class_\">Config</span>&gt;(<span class=\"string\">&#x27;assets/config.json&#x27;</span>).<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">        <span class=\"title function_\">tap</span>(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">_config$</span>.<span class=\"title function_\">next</span>(config);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接著，在 <code>app.config.ts</code> 透過 <code>APP_INITIALIZER</code> 取得 <code>config.json</code> 的內容，並在此載入 Web Component：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">appConfig</span>: <span class=\"title class_\">ApplicationConfig</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">providers</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_INITIALIZER</span>,</span><br><span class=\"line\">      <span class=\"attr\">useFactory</span>: <span class=\"function\">(<span class=\"params\">configStore: ConfigStore</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 載入 config.json 並存入 ConfigStore 裡</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> configStore.<span class=\"title function_\">loadConfig</span>();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">deps</span>: [<span class=\"title class_\">ConfigStore</span>],</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">provide</span>: <span class=\"variable constant_\">APP_INITIALIZER</span>,</span><br><span class=\"line\">      <span class=\"attr\">useFactory</span>: <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        configStore: ConfigStore,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        loader: WebComponentDynamicLoaderService</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      </span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> configStore.<span class=\"property\">config$</span>.<span class=\"title function_\">pipe</span>(</span><br><span class=\"line\">            <span class=\"title function_\">take</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">            <span class=\"comment\">// 當 config.json 內容載入後，會根據設定內容來載入 Web Component Chunk</span></span><br><span class=\"line\">            <span class=\"title function_\">concatMap</span>(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> <span class=\"title function_\">from</span>(config.<span class=\"property\">webComponents</span>)),</span><br><span class=\"line\">            <span class=\"title function_\">mergeMap</span>(<span class=\"function\">(<span class=\"params\">&#123; id, source &#125;</span>) =&gt;</span> loader.<span class=\"title function_\">load</span>(id, source)),</span><br><span class=\"line\">            <span class=\"title function_\">toArray</span>()</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">deps</span>: [<span class=\"title class_\">ConfigStore</span>, <span class=\"title class_\">WebComponentDynamicLoaderService</span>],</span><br><span class=\"line\">      <span class=\"attr\">multi</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>如此一來，便可以用動態的方式將 Web Component 載入。</p>\n<blockquote>\n<p><strong>NOTE</strong>：實作結果可以 clone <a href=\"https://github.com/hao0731/angular-dynamic-load-web-component\">這個專案</a>玩玩看。</p>\n</blockquote>\n"},{"title":"你可能不知道的 NestJS 隱藏技巧：Discovery Module","date":"2023-09-17T09:35:00.000Z","_content":"\n在某些應用場景下，可能會需要去遍歷封裝於 **模組（Module）** 內的元件，比如：找出帶有特定 **裝飾器（Decorator）** 的元件，甚至是元件底下的方法，來預先處理一些事情，最典型的案例就是 `EventEmitterModule`，當某個事件觸發時，會呼叫帶有特定裝飾器的方法。\n\n> **NOTE**：關於 `EventEmitterModule` 可以參考[官方文件](https://docs.nestjs.com/techniques/events)的說明。\n\n下方是官方 `EventEmitterModule` 的範例，透過 `EventEmitter2` 發送 `order.created` 事件時，會呼叫帶有 `@OnEvent` 裝飾器且值為 `order.created` 的方法：\n\n```typescript\nthis.eventEmitter.emit(\n  'order.created',\n  new OrderCreatedEvent({\n    orderId: 1,\n    payload: {},\n  }),\n);\n```\n\n```typescript\n// ...\n@Injectable()\nexport class OrderListener {\n  // ...\n  @OnEvent('order.created')\n  handleOrderCreatedEvent(payload: OrderCreatedEvent) {\n    // handle and process \"OrderCreatedEvent\" event\n  }\n}\n```\n\n那麼 `EventEmitterModule` 是如何做到這件事情的呢？它是透過一個叫 `DiscoveryModule` 的模組來找出所有元件底下含有 `@OnEvent` 裝飾器的方法，並根據帶入的值，來決定該方法在哪個事件下會被觸發。\n\n> **NOTE**：`DiscoveryModule` 並沒有收錄在 NestJS 官方文件中。\n\n## 深入 Discovery Module\n\n> **NOTE**：以下範例採用 NestJS 10 來撰寫。\n\n`DiscoveryModule` 是一個 NestJS 內建的模組，無須安裝套件，使用方式如下：\n\n```typescript\nimport { Module } from '@nestjs/common';\nimport { DiscoveryModule } from '@nestjs/core';\n// ...\n\n@Module({\n  // ...\n  imports: [DiscoveryModule],\n  // ...\n})\nexport class AppModule {}\n```\n\n引入模組後，可以透過 `DiscoveryService` 來取得封裝於模組底下的 Controller 或 Provider：\n\n```typescript\nimport { Module } from '@nestjs/common';\nimport { DiscoveryModule, DiscoveryService } from '@nestjs/core';\n// ...\n\n@Module({\n  // ...\n  imports: [DiscoveryModule],\n  // ...\n})\nexport class AppModule implements OnModuleInit {\n  constructor(\n    private readonly discoveryService: DiscoveryService\n  ) {}\n\n  onModuleInit() {\n    // 遍歷所有模組，以取得所有 Controller\n    const controllers = this.discoveryService.getControllers();\n    // 遍歷所有模組，以取得所有 Provider\n    const providers = this.discoveryService.getProviders();\n  }\n}\n```\n\n這裡需特別注意，取得的 **不是** Controller、Provider 本身，而是一個型別為 `InstanceWrapper` 的 Wrapper，若要拿到它們的本身的 **實例（Instance）**，只需要透過 `instance` 屬性即可取得，如下所示：\n\n```typescript\n// 將 instance 從 `InstanceWrapper` 取出\nconst instances = this.discoveryService.getControllers().map(({ instance }) => instance);\n```\n\n### 限縮遍歷範圍\n\n如果想要限制遍歷的模組範圍，`getControllers` 跟 `getProviders` 有提供相關參數，透過指定 `include` 來決定要遍歷哪些模組：\n\n```typescript\nimport { Module, OnModuleInit } from '@nestjs/common';\nimport { DiscoveryModule, DiscoveryService } from '@nestjs/core';\n// ...\n\n@Module({\n  // ...\n  imports: [TodoModule, DiscoveryModule],\n  // ...\n})\nexport class AppModule implements OnModuleInit {\n  constructor(\n    private readonly discoveryService: DiscoveryService\n  ) {}\n\n  onModuleInit() {\n    // 遍歷 `TodoModule`底下的元件，以取得底下的所有 Provider\n    const providers = this.discoveryService.getProviders({\n      include: [TodoModule],\n    });\n    // 遍歷 `TodoModule`底下的元件，以取得底下的所有 Controller\n    const controllers = this.discoveryService.getControllers({\n      include: [TodoModule],\n    });\n  }\n}\n```\n\n### 過濾別名 Provider 的技巧\n\n由於 `getProviders` 會拿到所有 Provider，所有裡面會含有 Alias Provider，在某些情境下有可能會導致相同的東西被處理一次以上，所以在預處理前，要先進行過濾：\n\n```typescript\nimport { Module, OnModuleInit } from '@nestjs/common';\nimport { DiscoveryModule, DiscoveryService } from '@nestjs/core';\n// ...\n\n@Module({\n  // ...\n  imports: [DiscoveryModule],\n  // ...\n})\nexport class AppModule implements OnModuleInit {\n  constructor(\n    private readonly discoveryService: DiscoveryService,\n    private readonly metadataScanner: MetadataScanner\n  ) {}\n\n  onModuleInit() {\n    const providers = this.discoveryService.getProviders();\n    const controllers = this.discoveryService.getControllers();\n    [...providers, ...controllers]\n      // 根據 `instance` 是否存在以及 `isAlias` 為 `false` 來過濾 Alias Provider\n      .filter((wrapper) => wrapper.instance && !wrapper.isAlias)\n      .forEach((wrapper) => {\n        // do something\n      });\n  }\n}\n```\n\n## 與 Metadata Scanner 共舞\n\n現在知道要如何透過 `DiscoveryModule` 遍歷所有元件了，那有什麼方法可以取得元件底下所有的方法呢？NestJS 有提供一個叫 `MetadataScanner` 的 Provider，讓我們可以去掃描元件下的所有方法，使用方式如下：\n\n```typescript\nimport { Module, OnModuleInit } from '@nestjs/common';\nimport { MetadataScanner } from '@nestjs/core';\n// ...\n\n@Module({\n  // ...\n})\nexport class AppModule implements OnModuleInit {\n  constructor(\n    private readonly metadataScanner: MetadataScanner\n  ) {}\n\n  onModuleInit() {\n    const instance = new Component();\n    // 取得元件底下的所有方法名稱\n    const methodNames = this.metadataScanner.getAllMethodNames(instance);\n  }\n}\n```\n\n那麼加上 `DiscoveryModule`，就可以遍歷所有元件底下的方法名稱了：\n\n```typescript\nimport { Module, OnModuleInit } from '@nestjs/common';\nimport {\n  DiscoveryModule,\n  DiscoveryService,\n  MetadataScanner\n} from '@nestjs/core';\n// ...\n\n@Module({\n  // ...\n  imports: [DiscoveryModule],\n  // ...\n})\nexport class AppModule implements OnModuleInit {\n  constructor(\n    private readonly discoveryService: DiscoveryService,\n    private readonly metadataScanner: MetadataScanner\n  ) {}\n\n  onModuleInit() {\n    const providers = this.discoveryService.getProviders();\n    const controllers = this.discoveryService.getControllers();\n\n    [...providers, ...controllers]\n      .filter((wrapper) => wrapper.instance && !wrapper.isAlias)\n      .forEach((wrapper) => {\n        const { instance } = wrapper;\n        const methodNames = this.metadataScanner.getAllMethodNames(instance);\n      });\n  }\n}\n```\n\n### 搭配 Reflector 打出連續技\n\n假設現在需要抓取所有元件下帶有 `HelloWorld` 裝飾器的方法，可以運用 `DiscoveryModule` 先遍歷所有的元件，再透過 `MetadataScanner` 掃出每個元件下的方法名稱，最後再使用 `Reflector` 篩選出最終結果。\n\n假設現在有一個 `@HelloWorld` 裝飾器：\n\n```typescript\nimport { SetMetadata } from '@nestjs/common';\n\nexport const HELLO_WORLD_KEY = 'custom:hello-word';\n\nexport const HelloWorld = () => SetMetadata(HELLO_WORLD_KEY, 'Hello World');\n```\n\n並且只在 `TodoModule` 底下的 `TodoController` 中使用：\n\n```typescript\nimport { Controller, Get } from '@nestjs/common';\n// ...\n\n@Controller('todos')\nexport class TodoController {\n  @HelloWorld()\n  @Get()\n  getTodos() {\n    return [];\n  }\n}\n```\n\n這時可以運用 `Reflector` 的 `get` 方法，來判斷元件底下的方法是否有使用 `@HelloWorld` 裝飾器：\n\n```typescript\nimport { Module, OnModuleInit } from '@nestjs/common';\nimport {\n  DiscoveryModule,\n  DiscoveryService,\n  MetadataScanner,\n  Reflector,\n} from '@nestjs/core';\n// ...\n\n@Module({\n  // ...\n  imports: [TodoModule, DiscoveryModule],\n  // ...\n})\nexport class AppModule implements OnModuleInit {\n  constructor(\n    private readonly discoveryService: DiscoveryService,\n    private readonly metadataScanner: MetadataScanner,\n    private readonly reflector: Reflector,\n  ) {}\n\n  onModuleInit() {\n    const providers = this.discoveryService.getProviders();\n    const controllers = this.discoveryService.getControllers();\n    \n    [...providers, ...controllers]\n      .filter((wrapper) => wrapper.instance && !wrapper.isAlias)\n      .forEach((wrapper) => {\n        const { instance } = wrapper;\n        const methodNames = this.metadataScanner.getAllMethodNames(instance);\n        methodNames\n          .filter(\n            (methodName) =>\n              this.reflector.get<string>(\n                HELLO_WORLD_KEY,\n                instance[methodName],\n              ) === 'Hello World',\n          )\n          .forEach((methodName) => {\n            console.log(methodName); // 'getTodos'\n          });\n      });\n  }\n}\n```\n\n## 結論\n\n`DiscoveryModule` 是一個蠻好用的內建模組，尤其是針對一些事件驅動的情境特別適合，比如說：使用第三方的 SDK，它收到某個事件時可以呼叫我們帶有特定裝飾器的方法等。\n\n## 參考資料\n\n- [EventEmitterModule](https://github.com/nestjs/event-emitter/tree/master)\n","source":"_posts/0002-nestjs-discovery-module.md","raw":"---\ntitle: 你可能不知道的 NestJS 隱藏技巧：Discovery Module\ndate: 2023-09-17 17:35:00\ntags:\n  - Backend\n  - NestJS\ncategories:\n  - ['Backend', 'NestJS', 'Advanced']\n---\n\n在某些應用場景下，可能會需要去遍歷封裝於 **模組（Module）** 內的元件，比如：找出帶有特定 **裝飾器（Decorator）** 的元件，甚至是元件底下的方法，來預先處理一些事情，最典型的案例就是 `EventEmitterModule`，當某個事件觸發時，會呼叫帶有特定裝飾器的方法。\n\n> **NOTE**：關於 `EventEmitterModule` 可以參考[官方文件](https://docs.nestjs.com/techniques/events)的說明。\n\n下方是官方 `EventEmitterModule` 的範例，透過 `EventEmitter2` 發送 `order.created` 事件時，會呼叫帶有 `@OnEvent` 裝飾器且值為 `order.created` 的方法：\n\n```typescript\nthis.eventEmitter.emit(\n  'order.created',\n  new OrderCreatedEvent({\n    orderId: 1,\n    payload: {},\n  }),\n);\n```\n\n```typescript\n// ...\n@Injectable()\nexport class OrderListener {\n  // ...\n  @OnEvent('order.created')\n  handleOrderCreatedEvent(payload: OrderCreatedEvent) {\n    // handle and process \"OrderCreatedEvent\" event\n  }\n}\n```\n\n那麼 `EventEmitterModule` 是如何做到這件事情的呢？它是透過一個叫 `DiscoveryModule` 的模組來找出所有元件底下含有 `@OnEvent` 裝飾器的方法，並根據帶入的值，來決定該方法在哪個事件下會被觸發。\n\n> **NOTE**：`DiscoveryModule` 並沒有收錄在 NestJS 官方文件中。\n\n## 深入 Discovery Module\n\n> **NOTE**：以下範例採用 NestJS 10 來撰寫。\n\n`DiscoveryModule` 是一個 NestJS 內建的模組，無須安裝套件，使用方式如下：\n\n```typescript\nimport { Module } from '@nestjs/common';\nimport { DiscoveryModule } from '@nestjs/core';\n// ...\n\n@Module({\n  // ...\n  imports: [DiscoveryModule],\n  // ...\n})\nexport class AppModule {}\n```\n\n引入模組後，可以透過 `DiscoveryService` 來取得封裝於模組底下的 Controller 或 Provider：\n\n```typescript\nimport { Module } from '@nestjs/common';\nimport { DiscoveryModule, DiscoveryService } from '@nestjs/core';\n// ...\n\n@Module({\n  // ...\n  imports: [DiscoveryModule],\n  // ...\n})\nexport class AppModule implements OnModuleInit {\n  constructor(\n    private readonly discoveryService: DiscoveryService\n  ) {}\n\n  onModuleInit() {\n    // 遍歷所有模組，以取得所有 Controller\n    const controllers = this.discoveryService.getControllers();\n    // 遍歷所有模組，以取得所有 Provider\n    const providers = this.discoveryService.getProviders();\n  }\n}\n```\n\n這裡需特別注意，取得的 **不是** Controller、Provider 本身，而是一個型別為 `InstanceWrapper` 的 Wrapper，若要拿到它們的本身的 **實例（Instance）**，只需要透過 `instance` 屬性即可取得，如下所示：\n\n```typescript\n// 將 instance 從 `InstanceWrapper` 取出\nconst instances = this.discoveryService.getControllers().map(({ instance }) => instance);\n```\n\n### 限縮遍歷範圍\n\n如果想要限制遍歷的模組範圍，`getControllers` 跟 `getProviders` 有提供相關參數，透過指定 `include` 來決定要遍歷哪些模組：\n\n```typescript\nimport { Module, OnModuleInit } from '@nestjs/common';\nimport { DiscoveryModule, DiscoveryService } from '@nestjs/core';\n// ...\n\n@Module({\n  // ...\n  imports: [TodoModule, DiscoveryModule],\n  // ...\n})\nexport class AppModule implements OnModuleInit {\n  constructor(\n    private readonly discoveryService: DiscoveryService\n  ) {}\n\n  onModuleInit() {\n    // 遍歷 `TodoModule`底下的元件，以取得底下的所有 Provider\n    const providers = this.discoveryService.getProviders({\n      include: [TodoModule],\n    });\n    // 遍歷 `TodoModule`底下的元件，以取得底下的所有 Controller\n    const controllers = this.discoveryService.getControllers({\n      include: [TodoModule],\n    });\n  }\n}\n```\n\n### 過濾別名 Provider 的技巧\n\n由於 `getProviders` 會拿到所有 Provider，所有裡面會含有 Alias Provider，在某些情境下有可能會導致相同的東西被處理一次以上，所以在預處理前，要先進行過濾：\n\n```typescript\nimport { Module, OnModuleInit } from '@nestjs/common';\nimport { DiscoveryModule, DiscoveryService } from '@nestjs/core';\n// ...\n\n@Module({\n  // ...\n  imports: [DiscoveryModule],\n  // ...\n})\nexport class AppModule implements OnModuleInit {\n  constructor(\n    private readonly discoveryService: DiscoveryService,\n    private readonly metadataScanner: MetadataScanner\n  ) {}\n\n  onModuleInit() {\n    const providers = this.discoveryService.getProviders();\n    const controllers = this.discoveryService.getControllers();\n    [...providers, ...controllers]\n      // 根據 `instance` 是否存在以及 `isAlias` 為 `false` 來過濾 Alias Provider\n      .filter((wrapper) => wrapper.instance && !wrapper.isAlias)\n      .forEach((wrapper) => {\n        // do something\n      });\n  }\n}\n```\n\n## 與 Metadata Scanner 共舞\n\n現在知道要如何透過 `DiscoveryModule` 遍歷所有元件了，那有什麼方法可以取得元件底下所有的方法呢？NestJS 有提供一個叫 `MetadataScanner` 的 Provider，讓我們可以去掃描元件下的所有方法，使用方式如下：\n\n```typescript\nimport { Module, OnModuleInit } from '@nestjs/common';\nimport { MetadataScanner } from '@nestjs/core';\n// ...\n\n@Module({\n  // ...\n})\nexport class AppModule implements OnModuleInit {\n  constructor(\n    private readonly metadataScanner: MetadataScanner\n  ) {}\n\n  onModuleInit() {\n    const instance = new Component();\n    // 取得元件底下的所有方法名稱\n    const methodNames = this.metadataScanner.getAllMethodNames(instance);\n  }\n}\n```\n\n那麼加上 `DiscoveryModule`，就可以遍歷所有元件底下的方法名稱了：\n\n```typescript\nimport { Module, OnModuleInit } from '@nestjs/common';\nimport {\n  DiscoveryModule,\n  DiscoveryService,\n  MetadataScanner\n} from '@nestjs/core';\n// ...\n\n@Module({\n  // ...\n  imports: [DiscoveryModule],\n  // ...\n})\nexport class AppModule implements OnModuleInit {\n  constructor(\n    private readonly discoveryService: DiscoveryService,\n    private readonly metadataScanner: MetadataScanner\n  ) {}\n\n  onModuleInit() {\n    const providers = this.discoveryService.getProviders();\n    const controllers = this.discoveryService.getControllers();\n\n    [...providers, ...controllers]\n      .filter((wrapper) => wrapper.instance && !wrapper.isAlias)\n      .forEach((wrapper) => {\n        const { instance } = wrapper;\n        const methodNames = this.metadataScanner.getAllMethodNames(instance);\n      });\n  }\n}\n```\n\n### 搭配 Reflector 打出連續技\n\n假設現在需要抓取所有元件下帶有 `HelloWorld` 裝飾器的方法，可以運用 `DiscoveryModule` 先遍歷所有的元件，再透過 `MetadataScanner` 掃出每個元件下的方法名稱，最後再使用 `Reflector` 篩選出最終結果。\n\n假設現在有一個 `@HelloWorld` 裝飾器：\n\n```typescript\nimport { SetMetadata } from '@nestjs/common';\n\nexport const HELLO_WORLD_KEY = 'custom:hello-word';\n\nexport const HelloWorld = () => SetMetadata(HELLO_WORLD_KEY, 'Hello World');\n```\n\n並且只在 `TodoModule` 底下的 `TodoController` 中使用：\n\n```typescript\nimport { Controller, Get } from '@nestjs/common';\n// ...\n\n@Controller('todos')\nexport class TodoController {\n  @HelloWorld()\n  @Get()\n  getTodos() {\n    return [];\n  }\n}\n```\n\n這時可以運用 `Reflector` 的 `get` 方法，來判斷元件底下的方法是否有使用 `@HelloWorld` 裝飾器：\n\n```typescript\nimport { Module, OnModuleInit } from '@nestjs/common';\nimport {\n  DiscoveryModule,\n  DiscoveryService,\n  MetadataScanner,\n  Reflector,\n} from '@nestjs/core';\n// ...\n\n@Module({\n  // ...\n  imports: [TodoModule, DiscoveryModule],\n  // ...\n})\nexport class AppModule implements OnModuleInit {\n  constructor(\n    private readonly discoveryService: DiscoveryService,\n    private readonly metadataScanner: MetadataScanner,\n    private readonly reflector: Reflector,\n  ) {}\n\n  onModuleInit() {\n    const providers = this.discoveryService.getProviders();\n    const controllers = this.discoveryService.getControllers();\n    \n    [...providers, ...controllers]\n      .filter((wrapper) => wrapper.instance && !wrapper.isAlias)\n      .forEach((wrapper) => {\n        const { instance } = wrapper;\n        const methodNames = this.metadataScanner.getAllMethodNames(instance);\n        methodNames\n          .filter(\n            (methodName) =>\n              this.reflector.get<string>(\n                HELLO_WORLD_KEY,\n                instance[methodName],\n              ) === 'Hello World',\n          )\n          .forEach((methodName) => {\n            console.log(methodName); // 'getTodos'\n          });\n      });\n  }\n}\n```\n\n## 結論\n\n`DiscoveryModule` 是一個蠻好用的內建模組，尤其是針對一些事件驅動的情境特別適合，比如說：使用第三方的 SDK，它收到某個事件時可以呼叫我們帶有特定裝飾器的方法等。\n\n## 參考資料\n\n- [EventEmitterModule](https://github.com/nestjs/event-emitter/tree/master)\n","slug":"0002-nestjs-discovery-module","published":1,"updated":"2023-09-17T09:42:22.596Z","_id":"clmn9ksut000027gx9rsk5qmk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在某些應用場景下，可能會需要去遍歷封裝於 <strong>模組（Module）</strong> 內的元件，比如：找出帶有特定 <strong>裝飾器（Decorator）</strong> 的元件，甚至是元件底下的方法，來預先處理一些事情，最典型的案例就是 <code>EventEmitterModule</code>，當某個事件觸發時，會呼叫帶有特定裝飾器的方法。</p>\n<blockquote>\n<p><strong>NOTE</strong>：關於 <code>EventEmitterModule</code> 可以參考<a href=\"https://docs.nestjs.com/techniques/events\">官方文件</a>的說明。</p>\n</blockquote>\n<p>下方是官方 <code>EventEmitterModule</code> 的範例，透過 <code>EventEmitter2</code> 發送 <code>order.created</code> 事件時，會呼叫帶有 <code>@OnEvent</code> 裝飾器且值為 <code>order.created</code> 的方法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">eventEmitter</span>.<span class=\"title function_\">emit</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;order.created&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">OrderCreatedEvent</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">orderId</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">payload</span>: &#123;&#125;,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderListener</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"meta\">@OnEvent</span>(<span class=\"string\">&#x27;order.created&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">handleOrderCreatedEvent</span>(<span class=\"params\">payload: OrderCreatedEvent</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle and process &quot;OrderCreatedEvent&quot; event</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那麼 <code>EventEmitterModule</code> 是如何做到這件事情的呢？它是透過一個叫 <code>DiscoveryModule</code> 的模組來找出所有元件底下含有 <code>@OnEvent</code> 裝飾器的方法，並根據帶入的值，來決定該方法在哪個事件下會被觸發。</p>\n<blockquote>\n<p><strong>NOTE</strong>：<code>DiscoveryModule</code> 並沒有收錄在 NestJS 官方文件中。</p>\n</blockquote>\n<h2 id=\"深入-Discovery-Module\"><a href=\"#深入-Discovery-Module\" class=\"headerlink\" title=\"深入 Discovery Module\"></a>深入 Discovery Module</h2><blockquote>\n<p><strong>NOTE</strong>：以下範例採用 NestJS 10 來撰寫。</p>\n</blockquote>\n<p><code>DiscoveryModule</code> 是一個 NestJS 內建的模組，無須安裝套件，使用方式如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DiscoveryModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">DiscoveryModule</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>引入模組後，可以透過 <code>DiscoveryService</code> 來取得封裝於模組底下的 Controller 或 Provider：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DiscoveryModule</span>, <span class=\"title class_\">DiscoveryService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">DiscoveryModule</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnModuleInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> discoveryService: DiscoveryService</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onModuleInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍歷所有模組，以取得所有 Controller</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> controllers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getControllers</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 遍歷所有模組，以取得所有 Provider</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> providers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getProviders</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這裡需特別注意，取得的 <strong>不是</strong> Controller、Provider 本身，而是一個型別為 <code>InstanceWrapper</code> 的 Wrapper，若要拿到它們的本身的 <strong>實例（Instance）</strong>，只需要透過 <code>instance</code> 屬性即可取得，如下所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 將 instance 從 `InstanceWrapper` 取出</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> instances = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getControllers</span>().<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">&#123; instance &#125;</span>) =&gt;</span> instance);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"限縮遍歷範圍\"><a href=\"#限縮遍歷範圍\" class=\"headerlink\" title=\"限縮遍歷範圍\"></a>限縮遍歷範圍</h3><p>如果想要限制遍歷的模組範圍，<code>getControllers</code> 跟 <code>getProviders</code> 有提供相關參數，透過指定 <code>include</code> 來決定要遍歷哪些模組：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span>, <span class=\"title class_\">OnModuleInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DiscoveryModule</span>, <span class=\"title class_\">DiscoveryService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">TodoModule</span>, <span class=\"title class_\">DiscoveryModule</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnModuleInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> discoveryService: DiscoveryService</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onModuleInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍歷 `TodoModule`底下的元件，以取得底下的所有 Provider</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> providers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getProviders</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">include</span>: [<span class=\"title class_\">TodoModule</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 遍歷 `TodoModule`底下的元件，以取得底下的所有 Controller</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> controllers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getControllers</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">include</span>: [<span class=\"title class_\">TodoModule</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"過濾別名-Provider-的技巧\"><a href=\"#過濾別名-Provider-的技巧\" class=\"headerlink\" title=\"過濾別名 Provider 的技巧\"></a>過濾別名 Provider 的技巧</h3><p>由於 <code>getProviders</code> 會拿到所有 Provider，所有裡面會含有 Alias Provider，在某些情境下有可能會導致相同的東西被處理一次以上，所以在預處理前，要先進行過濾：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span>, <span class=\"title class_\">OnModuleInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DiscoveryModule</span>, <span class=\"title class_\">DiscoveryService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">DiscoveryModule</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnModuleInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> discoveryService: DiscoveryService,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> metadataScanner: MetadataScanner</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onModuleInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> providers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getProviders</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> controllers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getControllers</span>();</span><br><span class=\"line\">    [...providers, ...controllers]</span><br><span class=\"line\">      <span class=\"comment\">// 根據 `instance` 是否存在以及 `isAlias` 為 `false` 來過濾 Alias Provider</span></span><br><span class=\"line\">      .<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">wrapper</span>) =&gt;</span> wrapper.<span class=\"property\">instance</span> &amp;&amp; !wrapper.<span class=\"property\">isAlias</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">wrapper</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"與-Metadata-Scanner-共舞\"><a href=\"#與-Metadata-Scanner-共舞\" class=\"headerlink\" title=\"與 Metadata Scanner 共舞\"></a>與 Metadata Scanner 共舞</h2><p>現在知道要如何透過 <code>DiscoveryModule</code> 遍歷所有元件了，那有什麼方法可以取得元件底下所有的方法呢？NestJS 有提供一個叫 <code>MetadataScanner</code> 的 Provider，讓我們可以去掃描元件下的所有方法，使用方式如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span>, <span class=\"title class_\">OnModuleInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">MetadataScanner</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnModuleInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> metadataScanner: MetadataScanner</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onModuleInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Component</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 取得元件底下的所有方法名稱</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> methodNames = <span class=\"variable language_\">this</span>.<span class=\"property\">metadataScanner</span>.<span class=\"title function_\">getAllMethodNames</span>(instance);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那麼加上 <code>DiscoveryModule</code>，就可以遍歷所有元件底下的方法名稱了：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span>, <span class=\"title class_\">OnModuleInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">DiscoveryModule</span>,</span><br><span class=\"line\">  <span class=\"title class_\">DiscoveryService</span>,</span><br><span class=\"line\">  <span class=\"title class_\">MetadataScanner</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">DiscoveryModule</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnModuleInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> discoveryService: DiscoveryService,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> metadataScanner: MetadataScanner</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onModuleInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> providers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getProviders</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> controllers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getControllers</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    [...providers, ...controllers]</span><br><span class=\"line\">      .<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">wrapper</span>) =&gt;</span> wrapper.<span class=\"property\">instance</span> &amp;&amp; !wrapper.<span class=\"property\">isAlias</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">wrapper</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; instance &#125; = wrapper;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> methodNames = <span class=\"variable language_\">this</span>.<span class=\"property\">metadataScanner</span>.<span class=\"title function_\">getAllMethodNames</span>(instance);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搭配-Reflector-打出連續技\"><a href=\"#搭配-Reflector-打出連續技\" class=\"headerlink\" title=\"搭配 Reflector 打出連續技\"></a>搭配 Reflector 打出連續技</h3><p>假設現在需要抓取所有元件下帶有 <code>HelloWorld</code> 裝飾器的方法，可以運用 <code>DiscoveryModule</code> 先遍歷所有的元件，再透過 <code>MetadataScanner</code> 掃出每個元件下的方法名稱，最後再使用 <code>Reflector</code> 篩選出最終結果。</p>\n<p>假設現在有一個 <code>@HelloWorld</code> 裝飾器：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SetMetadata</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">HELLO_WORLD_KEY</span> = <span class=\"string\">&#x27;custom:hello-word&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">HelloWorld</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title class_\">SetMetadata</span>(<span class=\"variable constant_\">HELLO_WORLD_KEY</span>, <span class=\"string\">&#x27;Hello World&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>並且只在 <code>TodoModule</code> 底下的 <code>TodoController</code> 中使用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Get</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">&#x27;todos&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoController</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@HelloWorld</span>()</span><br><span class=\"line\">  <span class=\"meta\">@Get</span>()</span><br><span class=\"line\">  <span class=\"title function_\">getTodos</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這時可以運用 <code>Reflector</code> 的 <code>get</code> 方法，來判斷元件底下的方法是否有使用 <code>@HelloWorld</code> 裝飾器：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span>, <span class=\"title class_\">OnModuleInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">DiscoveryModule</span>,</span><br><span class=\"line\">  <span class=\"title class_\">DiscoveryService</span>,</span><br><span class=\"line\">  <span class=\"title class_\">MetadataScanner</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Reflector</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">TodoModule</span>, <span class=\"title class_\">DiscoveryModule</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnModuleInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> discoveryService: DiscoveryService,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> metadataScanner: MetadataScanner,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> reflector: Reflector,</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onModuleInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> providers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getProviders</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> controllers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getControllers</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    [...providers, ...controllers]</span><br><span class=\"line\">      .<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">wrapper</span>) =&gt;</span> wrapper.<span class=\"property\">instance</span> &amp;&amp; !wrapper.<span class=\"property\">isAlias</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">wrapper</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; instance &#125; = wrapper;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> methodNames = <span class=\"variable language_\">this</span>.<span class=\"property\">metadataScanner</span>.<span class=\"title function_\">getAllMethodNames</span>(instance);</span><br><span class=\"line\">        methodNames</span><br><span class=\"line\">          .<span class=\"title function_\">filter</span>(</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">methodName</span>) =&gt;</span></span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"property\">reflector</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">string</span>&gt;(</span><br><span class=\"line\">                <span class=\"variable constant_\">HELLO_WORLD_KEY</span>,</span><br><span class=\"line\">                instance[methodName],</span><br><span class=\"line\">              ) === <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">          )</span><br><span class=\"line\">          .<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">methodName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(methodName); <span class=\"comment\">// &#x27;getTodos&#x27;</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p><code>DiscoveryModule</code> 是一個蠻好用的內建模組，尤其是針對一些事件驅動的情境特別適合，比如說：使用第三方的 SDK，它收到某個事件時可以呼叫我們帶有特定裝飾器的方法等。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://github.com/nestjs/event-emitter/tree/master\">EventEmitterModule</a></li>\n</ul>\n","site":{"data":{"widget":{"bottom":[{"name":"推薦 Blog","icon":"fas fa-blog","html":"<div><a href=\"https://hcluo.blogspot.com/\" target=\"_blank\">hcLuo Blog</a></div><div><a href=\"https://blog.leochen.dev/\" target=\"_blank\">Leo's Coding Life</a></div>"}]}}},"cover":false,"excerpt":"","more":"<p>在某些應用場景下，可能會需要去遍歷封裝於 <strong>模組（Module）</strong> 內的元件，比如：找出帶有特定 <strong>裝飾器（Decorator）</strong> 的元件，甚至是元件底下的方法，來預先處理一些事情，最典型的案例就是 <code>EventEmitterModule</code>，當某個事件觸發時，會呼叫帶有特定裝飾器的方法。</p>\n<blockquote>\n<p><strong>NOTE</strong>：關於 <code>EventEmitterModule</code> 可以參考<a href=\"https://docs.nestjs.com/techniques/events\">官方文件</a>的說明。</p>\n</blockquote>\n<p>下方是官方 <code>EventEmitterModule</code> 的範例，透過 <code>EventEmitter2</code> 發送 <code>order.created</code> 事件時，會呼叫帶有 <code>@OnEvent</code> 裝飾器且值為 <code>order.created</code> 的方法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">eventEmitter</span>.<span class=\"title function_\">emit</span>(</span><br><span class=\"line\">  <span class=\"string\">&#x27;order.created&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">OrderCreatedEvent</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">orderId</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">payload</span>: &#123;&#125;,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>()</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderListener</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"meta\">@OnEvent</span>(<span class=\"string\">&#x27;order.created&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">handleOrderCreatedEvent</span>(<span class=\"params\">payload: OrderCreatedEvent</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle and process &quot;OrderCreatedEvent&quot; event</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那麼 <code>EventEmitterModule</code> 是如何做到這件事情的呢？它是透過一個叫 <code>DiscoveryModule</code> 的模組來找出所有元件底下含有 <code>@OnEvent</code> 裝飾器的方法，並根據帶入的值，來決定該方法在哪個事件下會被觸發。</p>\n<blockquote>\n<p><strong>NOTE</strong>：<code>DiscoveryModule</code> 並沒有收錄在 NestJS 官方文件中。</p>\n</blockquote>\n<h2 id=\"深入-Discovery-Module\"><a href=\"#深入-Discovery-Module\" class=\"headerlink\" title=\"深入 Discovery Module\"></a>深入 Discovery Module</h2><blockquote>\n<p><strong>NOTE</strong>：以下範例採用 NestJS 10 來撰寫。</p>\n</blockquote>\n<p><code>DiscoveryModule</code> 是一個 NestJS 內建的模組，無須安裝套件，使用方式如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DiscoveryModule</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">DiscoveryModule</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>引入模組後，可以透過 <code>DiscoveryService</code> 來取得封裝於模組底下的 Controller 或 Provider：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DiscoveryModule</span>, <span class=\"title class_\">DiscoveryService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">DiscoveryModule</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnModuleInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> discoveryService: DiscoveryService</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onModuleInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍歷所有模組，以取得所有 Controller</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> controllers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getControllers</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 遍歷所有模組，以取得所有 Provider</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> providers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getProviders</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這裡需特別注意，取得的 <strong>不是</strong> Controller、Provider 本身，而是一個型別為 <code>InstanceWrapper</code> 的 Wrapper，若要拿到它們的本身的 <strong>實例（Instance）</strong>，只需要透過 <code>instance</code> 屬性即可取得，如下所示：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 將 instance 從 `InstanceWrapper` 取出</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> instances = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getControllers</span>().<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">&#123; instance &#125;</span>) =&gt;</span> instance);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"限縮遍歷範圍\"><a href=\"#限縮遍歷範圍\" class=\"headerlink\" title=\"限縮遍歷範圍\"></a>限縮遍歷範圍</h3><p>如果想要限制遍歷的模組範圍，<code>getControllers</code> 跟 <code>getProviders</code> 有提供相關參數，透過指定 <code>include</code> 來決定要遍歷哪些模組：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span>, <span class=\"title class_\">OnModuleInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DiscoveryModule</span>, <span class=\"title class_\">DiscoveryService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">TodoModule</span>, <span class=\"title class_\">DiscoveryModule</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnModuleInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> discoveryService: DiscoveryService</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onModuleInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 遍歷 `TodoModule`底下的元件，以取得底下的所有 Provider</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> providers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getProviders</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">include</span>: [<span class=\"title class_\">TodoModule</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 遍歷 `TodoModule`底下的元件，以取得底下的所有 Controller</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> controllers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getControllers</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">include</span>: [<span class=\"title class_\">TodoModule</span>],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"過濾別名-Provider-的技巧\"><a href=\"#過濾別名-Provider-的技巧\" class=\"headerlink\" title=\"過濾別名 Provider 的技巧\"></a>過濾別名 Provider 的技巧</h3><p>由於 <code>getProviders</code> 會拿到所有 Provider，所有裡面會含有 Alias Provider，在某些情境下有可能會導致相同的東西被處理一次以上，所以在預處理前，要先進行過濾：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span>, <span class=\"title class_\">OnModuleInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">DiscoveryModule</span>, <span class=\"title class_\">DiscoveryService</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">DiscoveryModule</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnModuleInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> discoveryService: DiscoveryService,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> metadataScanner: MetadataScanner</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onModuleInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> providers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getProviders</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> controllers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getControllers</span>();</span><br><span class=\"line\">    [...providers, ...controllers]</span><br><span class=\"line\">      <span class=\"comment\">// 根據 `instance` 是否存在以及 `isAlias` 為 `false` 來過濾 Alias Provider</span></span><br><span class=\"line\">      .<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">wrapper</span>) =&gt;</span> wrapper.<span class=\"property\">instance</span> &amp;&amp; !wrapper.<span class=\"property\">isAlias</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">wrapper</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"與-Metadata-Scanner-共舞\"><a href=\"#與-Metadata-Scanner-共舞\" class=\"headerlink\" title=\"與 Metadata Scanner 共舞\"></a>與 Metadata Scanner 共舞</h2><p>現在知道要如何透過 <code>DiscoveryModule</code> 遍歷所有元件了，那有什麼方法可以取得元件底下所有的方法呢？NestJS 有提供一個叫 <code>MetadataScanner</code> 的 Provider，讓我們可以去掃描元件下的所有方法，使用方式如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span>, <span class=\"title class_\">OnModuleInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">MetadataScanner</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnModuleInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> metadataScanner: MetadataScanner</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onModuleInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Component</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 取得元件底下的所有方法名稱</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> methodNames = <span class=\"variable language_\">this</span>.<span class=\"property\">metadataScanner</span>.<span class=\"title function_\">getAllMethodNames</span>(instance);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那麼加上 <code>DiscoveryModule</code>，就可以遍歷所有元件底下的方法名稱了：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span>, <span class=\"title class_\">OnModuleInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">DiscoveryModule</span>,</span><br><span class=\"line\">  <span class=\"title class_\">DiscoveryService</span>,</span><br><span class=\"line\">  <span class=\"title class_\">MetadataScanner</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">DiscoveryModule</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnModuleInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> discoveryService: DiscoveryService,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> metadataScanner: MetadataScanner</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onModuleInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> providers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getProviders</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> controllers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getControllers</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    [...providers, ...controllers]</span><br><span class=\"line\">      .<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">wrapper</span>) =&gt;</span> wrapper.<span class=\"property\">instance</span> &amp;&amp; !wrapper.<span class=\"property\">isAlias</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">wrapper</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; instance &#125; = wrapper;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> methodNames = <span class=\"variable language_\">this</span>.<span class=\"property\">metadataScanner</span>.<span class=\"title function_\">getAllMethodNames</span>(instance);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搭配-Reflector-打出連續技\"><a href=\"#搭配-Reflector-打出連續技\" class=\"headerlink\" title=\"搭配 Reflector 打出連續技\"></a>搭配 Reflector 打出連續技</h3><p>假設現在需要抓取所有元件下帶有 <code>HelloWorld</code> 裝飾器的方法，可以運用 <code>DiscoveryModule</code> 先遍歷所有的元件，再透過 <code>MetadataScanner</code> 掃出每個元件下的方法名稱，最後再使用 <code>Reflector</code> 篩選出最終結果。</p>\n<p>假設現在有一個 <code>@HelloWorld</code> 裝飾器：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">SetMetadata</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"variable constant_\">HELLO_WORLD_KEY</span> = <span class=\"string\">&#x27;custom:hello-word&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">HelloWorld</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title class_\">SetMetadata</span>(<span class=\"variable constant_\">HELLO_WORLD_KEY</span>, <span class=\"string\">&#x27;Hello World&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>並且只在 <code>TodoModule</code> 底下的 <code>TodoController</code> 中使用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Controller</span>, <span class=\"title class_\">Get</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span>(<span class=\"string\">&#x27;todos&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TodoController</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@HelloWorld</span>()</span><br><span class=\"line\">  <span class=\"meta\">@Get</span>()</span><br><span class=\"line\">  <span class=\"title function_\">getTodos</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>這時可以運用 <code>Reflector</code> 的 <code>get</code> 方法，來判斷元件底下的方法是否有使用 <code>@HelloWorld</code> 裝飾器：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Module</span>, <span class=\"title class_\">OnModuleInit</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/common&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">DiscoveryModule</span>,</span><br><span class=\"line\">  <span class=\"title class_\">DiscoveryService</span>,</span><br><span class=\"line\">  <span class=\"title class_\">MetadataScanner</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Reflector</span>,</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@nestjs/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Module</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">imports</span>: [<span class=\"title class_\">TodoModule</span>, <span class=\"title class_\">DiscoveryModule</span>],</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppModule</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">OnModuleInit</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> discoveryService: DiscoveryService,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> metadataScanner: MetadataScanner,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> reflector: Reflector,</span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">onModuleInit</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> providers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getProviders</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> controllers = <span class=\"variable language_\">this</span>.<span class=\"property\">discoveryService</span>.<span class=\"title function_\">getControllers</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    [...providers, ...controllers]</span><br><span class=\"line\">      .<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">wrapper</span>) =&gt;</span> wrapper.<span class=\"property\">instance</span> &amp;&amp; !wrapper.<span class=\"property\">isAlias</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">wrapper</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; instance &#125; = wrapper;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> methodNames = <span class=\"variable language_\">this</span>.<span class=\"property\">metadataScanner</span>.<span class=\"title function_\">getAllMethodNames</span>(instance);</span><br><span class=\"line\">        methodNames</span><br><span class=\"line\">          .<span class=\"title function_\">filter</span>(</span><br><span class=\"line\">            <span class=\"function\">(<span class=\"params\">methodName</span>) =&gt;</span></span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"property\">reflector</span>.<span class=\"property\">get</span>&lt;<span class=\"built_in\">string</span>&gt;(</span><br><span class=\"line\">                <span class=\"variable constant_\">HELLO_WORLD_KEY</span>,</span><br><span class=\"line\">                instance[methodName],</span><br><span class=\"line\">              ) === <span class=\"string\">&#x27;Hello World&#x27;</span>,</span><br><span class=\"line\">          )</span><br><span class=\"line\">          .<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">methodName</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(methodName); <span class=\"comment\">// &#x27;getTodos&#x27;</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p><code>DiscoveryModule</code> 是一個蠻好用的內建模組，尤其是針對一些事件驅動的情境特別適合，比如說：使用第三方的 SDK，它收到某個事件時可以呼叫我們帶有特定裝飾器的方法等。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://github.com/nestjs/event-emitter/tree/master\">EventEmitterModule</a></li>\n</ul>\n"},{"title":"KrakenD 簡介","date":"2025-01-11T11:00:00.000Z","_content":"\n## 什麼是 KrakenD？\n\n[KrakenD](https://www.krakend.io/) 是一套開源、可擴充、高效能的 **API Gateway**，使用 [Golang](https://go.dev/) 所撰寫，透過 JSON 設定檔即可聚合多個微服務到單一 Endpoint，並能夠運用內建或社群提供的 **中介軟體(Middleware)** 來擴展其功能，自動完成部分繁重的工作，如：**聚合(Aggregate)**、**轉換(Transform)**、**過濾(Filter)**、**解碼(Decode)**、**節流(Throttle)**、**身份驗證(Authenticate)** 等。\n\n<img\n  style=\"max-width: 500px;\"\n  src=\"krakend-flow.png\"\n  alt=\"KrakenD Flow Concept\"\n/>\n\n[圖片來源](https://www.krakend.io/docs/overview/)\n\n## 安裝 KrakenD\n\nKrakenD 有提供多種安裝方式，其中 Docker Image 的方式是最快、最容易的。透過下方指令即可將 KrakenD 的 Docker Image 從 Docker Hub 下載下來：\n\n```bash\n$ docker pull devopsfaith/krakend\n```\n\n使用下方指令即可快速啟動 KrakenD：\n\n```bash\n$ docker run -p 8080:8080 devopsfaith/krakend\n```\n\n啟動後，可以透過 `GET` 方法存取 [http://localhost:8080/__health](http://localhost:8080/__health) 來取得 KrakenD 的健康狀態，如果有收到下方回應就表示啟動成功：\n\n<img\n  style=\"max-width: 500px;\"\n  src=\"health-check-result.png\"\n  alt=\"Health Check Result\"\n/>\n\n這時可能會有些疑問，前面提到 KrakenD 是透過 JSON 設定檔來建立 Endpoint 的，但剛剛的步驟中沒有撰寫到任何的 JSON 卻可以順利啟動 KrakenD？原因是 KrakenD 預設狀況下會去讀取 `/etc/krakend` 路徑下的 `krakend.json`，當我們沒有透過 [Docker Volume](https://docs.docker.com/engine/storage/volumes/) 的方式將實體主機上檔案 mapping 到 container 內部時，預設會使用最基礎的 `krakend.json` 來啟動 KrakenD。\n\n## 認識 KrakenD 指令\n\n上述快速啟動 KrakenD 的方式，其實是該 Image 預設會執行 KrakenD 的 `run` 指令，那麼我們要如何完整的使用 KrakenD 所提供的指令與參數呢？我們可以透過下方指令執行 `help` 來查看 KrakenD 提供了哪些指令與參數：\n\n```bash\n$ docker run --rm -it devopsfaith/krakend help\n```\n\n<img\n  style=\"max-width: 500px;\"\n  src=\"krakend-help.png\"\n  alt=\"KrakenD Help\"\n/>\n\n從上圖可以看到共有以下幾個指令：\n\n* `audit`：檢查設定檔是否存在安全性風險。\n* `check`：檢查設定檔的格式、屬性等是合法的。\n* `check-plugin`：如果有自訂 **插件(Plugin)** 的話，可以透過這個指令來檢查是否與 KrakenD 相容。\n* `help`：查看 KrakenD 提供了哪些指令與參數。\n* `run`：啟動服務。\n* `test-plugin`：測試 Plugin 是否能夠被 KrakenD 載入。\n* `version`：顯示 KrakenD 版本以及編譯時使用的 Glibc 與 Golang 版本。\n\n> **NOTE**：上述指令中，大部分都需要更深入了解 KrakenD 才能理解其用途，之後介紹到相對應的功能時，會做更詳細的說明。\n\n## 認識設定檔\n\n前面有提到 KrakenD 會需要 `krakend.json` 才能啟動，這個設定檔最簡單的設置如下：\n\n```json\n{\n  \"version\": 3\n}\n```\n\n`version` 表示 **設定檔的版本**，與 KrakenD 版本不同，但每個設定檔版本都有 KrakenD 支援的版本區間：\n\n* `3`：目前最新版本，只要 KrakenD 在 `v2.0` 以上就可以使用。\n* `2`：在 2022 時棄用，KrakenD 版本在 `v0.4` 到 `v1.4.1` 時使用。\n* `1`：在 2016 時棄用，KrakenD 版本在 `v0.3.9` 以下時使用。\n\n實務上，我們不會只有一個 `version` 在設定檔內，這樣啟動後的 KrakenD 也沒有發揮 API Gateway 的功能。一個設定檔的主要結構如下：\n\n```json\n{\n  \"$schema\": \"https://www.krakend.io/schema/v2.8/krakend.json\",\n  \"version\": 3,\n  \"endpoints\": [],\n  \"extra_config\": {}\n}\n```\n\n上方可以看到多了三個屬性：\n\n* `$schema`：套用 KrakenD 提供的 JSON Schema，這樣可以與編輯器做整合，在撰寫該設定檔時，能夠有更多的提示訊息。此項目雖然不是必要的，但非常建議添加。\n* `endpoints`：定義 API 的設定。\n* `extra_config`：擴展 KrakenD 的元件設定。\n\n### endpoints 基礎介紹\n\n`endpoints` 可說是 KrakenD 最重要的設定，因為它會用來定義 KrakenD 要提供哪些 API 給使用者以及該 API 背後對應的服務是哪些。`endpoints` 內每個物件都是一個 API 的定義，下方是一個代理 Todo API 的設定：\n\n```json\n{\n  // ...\n  \"endpoints\": [\n    {\n      \"endpoint\": \"/api/todos\",\n      \"output_encoding\": \"no-op\",\n      \"backend\": [\n        {\n          \"host\": [\"https://jsonplaceholder.typicode.com\"],\n          \"url_pattern\": \"/todos\",\n          \"method\": \"GET\",\n          \"encoding\": \"no-op\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n上方的設定表示會代理 `https://jsonplaceholder.typicode.com/todos` 這個 API，使用者只需要用 `GET` 方法存取 [http://localhost:8080/api/todos](http://localhost:8080/api/todos) 即可獲得該 API 的結果。\n\n### extra_config 基礎介紹\n\n`extra_config` 主要是負責針對各式 Plugin 進行設定，每個 Plugin 都會有一個獨一無二的 **命名空間(Namespace)**，KrakenD 會在啟動時註冊 Plugin 並從 `extra_config` 找出對應名稱的設定，再將該設定內容傳遞給 Plugin。下方是擴展 Log 的 `extra_config` 設定：\n\n```json\n{\n  // ...\n    \"extra_config\": {\n      \"telemetry/logging\": {\n        \"level\": \"WARNING\",\n        \"prefix\": \"[KRAKEND]\",\n        \"stdout\": true\n      }\n  }\n}\n```\n\n> **NOTE**：有關 `telemetry/logging` 的介紹後續有機會再跟大家分享。\n\n`extra_config` 不僅可以出現在設定檔的根層級，也可以出現在其他層級，放的層級越深，作用的範圍就越小，而實際放置位置取決於 Plugin 的用途與性質。下方是 `extra_config` 可以設置的層級：\n\n* `service`：服務層級，也就是與 `endpoints` 相同層級的位置。這個層級會影響整個 KrakenD 以及所有請求。\n* `endpoint`：Endpoint 層級，指的是 `endpoints` 中的物件。影響範圍僅限於該 API Endpoint。\n* `backend`：Backend 層級，指的是 `backends` 中的物件。影響範圍僅限於該 Backend。\n\n## 小品練習\n\n首先，建立一個資料夾 `src` 並同時在該資料夾下新增 `krakend.json`：\n\n```json\n{\n  \"$schema\": \"https://www.krakend.io/schema/v2.8/krakend.json\",\n  \"version\": 3,\n  \"endpoints\": [\n    {\n      \"endpoint\": \"/api/todos\",\n      \"output_encoding\": \"no-op\",\n      \"backend\": [\n        {\n          \"host\": [\"https://jsonplaceholder.typicode.com\"],\n          \"url_pattern\": \"/todos\",\n          \"method\": \"GET\",\n          \"encoding\": \"no-op\"\n        }\n      ]\n    }\n  ],\n  \"extra_config\": {\n    \"telemetry/logging\": {\n      \"level\": \"WARNING\",\n      \"prefix\": \"[KRAKEND]\",\n      \"stdout\": true\n    }\n  }\n}\n```\n\n接著，透過下方指令以 Docker Volume 的方式將 `src` 資料夾 mapping 至 `/etc/krakend`，同時透過 `-c` 參數指定使用 `krakend.json` 作為設定檔：\n\n```bash\n$ docker run -p 8080:8080 -v $PWD/src:/etc/krakend devopsfaith/krakend run -c krakend.json\n```\n\n透過 Postman 以 `GET` 方法存取 [http://localhost:8080/api/todos](http://localhost:8080/api/todos)，可以順利拿到來自 `https://jsonplaceholder.typicode.com/todos` 的資料：\n\n<img\n  style=\"max-width: 500px;\"\n  src=\"krakend-result.png\"\n  alt=\"KrakenD Result\"\n/>\n\n## 結論\n\n今天簡單介紹了 KrakenD 以及啟動的方式，對於設定檔也有了初步的了解。後續會再針對設定檔的細節做更詳細的解說。","source":"_posts/0003-what-is-krakend.md","raw":"---\ntitle: KrakenD 簡介\ndate: 2025-01-11 19:00:00\ntags:\n  - Backend\n  - APIGateway\n  - KrakenD\ncategories:\n  - ['Backend', 'KrakenD']\n---\n\n## 什麼是 KrakenD？\n\n[KrakenD](https://www.krakend.io/) 是一套開源、可擴充、高效能的 **API Gateway**，使用 [Golang](https://go.dev/) 所撰寫，透過 JSON 設定檔即可聚合多個微服務到單一 Endpoint，並能夠運用內建或社群提供的 **中介軟體(Middleware)** 來擴展其功能，自動完成部分繁重的工作，如：**聚合(Aggregate)**、**轉換(Transform)**、**過濾(Filter)**、**解碼(Decode)**、**節流(Throttle)**、**身份驗證(Authenticate)** 等。\n\n<img\n  style=\"max-width: 500px;\"\n  src=\"krakend-flow.png\"\n  alt=\"KrakenD Flow Concept\"\n/>\n\n[圖片來源](https://www.krakend.io/docs/overview/)\n\n## 安裝 KrakenD\n\nKrakenD 有提供多種安裝方式，其中 Docker Image 的方式是最快、最容易的。透過下方指令即可將 KrakenD 的 Docker Image 從 Docker Hub 下載下來：\n\n```bash\n$ docker pull devopsfaith/krakend\n```\n\n使用下方指令即可快速啟動 KrakenD：\n\n```bash\n$ docker run -p 8080:8080 devopsfaith/krakend\n```\n\n啟動後，可以透過 `GET` 方法存取 [http://localhost:8080/__health](http://localhost:8080/__health) 來取得 KrakenD 的健康狀態，如果有收到下方回應就表示啟動成功：\n\n<img\n  style=\"max-width: 500px;\"\n  src=\"health-check-result.png\"\n  alt=\"Health Check Result\"\n/>\n\n這時可能會有些疑問，前面提到 KrakenD 是透過 JSON 設定檔來建立 Endpoint 的，但剛剛的步驟中沒有撰寫到任何的 JSON 卻可以順利啟動 KrakenD？原因是 KrakenD 預設狀況下會去讀取 `/etc/krakend` 路徑下的 `krakend.json`，當我們沒有透過 [Docker Volume](https://docs.docker.com/engine/storage/volumes/) 的方式將實體主機上檔案 mapping 到 container 內部時，預設會使用最基礎的 `krakend.json` 來啟動 KrakenD。\n\n## 認識 KrakenD 指令\n\n上述快速啟動 KrakenD 的方式，其實是該 Image 預設會執行 KrakenD 的 `run` 指令，那麼我們要如何完整的使用 KrakenD 所提供的指令與參數呢？我們可以透過下方指令執行 `help` 來查看 KrakenD 提供了哪些指令與參數：\n\n```bash\n$ docker run --rm -it devopsfaith/krakend help\n```\n\n<img\n  style=\"max-width: 500px;\"\n  src=\"krakend-help.png\"\n  alt=\"KrakenD Help\"\n/>\n\n從上圖可以看到共有以下幾個指令：\n\n* `audit`：檢查設定檔是否存在安全性風險。\n* `check`：檢查設定檔的格式、屬性等是合法的。\n* `check-plugin`：如果有自訂 **插件(Plugin)** 的話，可以透過這個指令來檢查是否與 KrakenD 相容。\n* `help`：查看 KrakenD 提供了哪些指令與參數。\n* `run`：啟動服務。\n* `test-plugin`：測試 Plugin 是否能夠被 KrakenD 載入。\n* `version`：顯示 KrakenD 版本以及編譯時使用的 Glibc 與 Golang 版本。\n\n> **NOTE**：上述指令中，大部分都需要更深入了解 KrakenD 才能理解其用途，之後介紹到相對應的功能時，會做更詳細的說明。\n\n## 認識設定檔\n\n前面有提到 KrakenD 會需要 `krakend.json` 才能啟動，這個設定檔最簡單的設置如下：\n\n```json\n{\n  \"version\": 3\n}\n```\n\n`version` 表示 **設定檔的版本**，與 KrakenD 版本不同，但每個設定檔版本都有 KrakenD 支援的版本區間：\n\n* `3`：目前最新版本，只要 KrakenD 在 `v2.0` 以上就可以使用。\n* `2`：在 2022 時棄用，KrakenD 版本在 `v0.4` 到 `v1.4.1` 時使用。\n* `1`：在 2016 時棄用，KrakenD 版本在 `v0.3.9` 以下時使用。\n\n實務上，我們不會只有一個 `version` 在設定檔內，這樣啟動後的 KrakenD 也沒有發揮 API Gateway 的功能。一個設定檔的主要結構如下：\n\n```json\n{\n  \"$schema\": \"https://www.krakend.io/schema/v2.8/krakend.json\",\n  \"version\": 3,\n  \"endpoints\": [],\n  \"extra_config\": {}\n}\n```\n\n上方可以看到多了三個屬性：\n\n* `$schema`：套用 KrakenD 提供的 JSON Schema，這樣可以與編輯器做整合，在撰寫該設定檔時，能夠有更多的提示訊息。此項目雖然不是必要的，但非常建議添加。\n* `endpoints`：定義 API 的設定。\n* `extra_config`：擴展 KrakenD 的元件設定。\n\n### endpoints 基礎介紹\n\n`endpoints` 可說是 KrakenD 最重要的設定，因為它會用來定義 KrakenD 要提供哪些 API 給使用者以及該 API 背後對應的服務是哪些。`endpoints` 內每個物件都是一個 API 的定義，下方是一個代理 Todo API 的設定：\n\n```json\n{\n  // ...\n  \"endpoints\": [\n    {\n      \"endpoint\": \"/api/todos\",\n      \"output_encoding\": \"no-op\",\n      \"backend\": [\n        {\n          \"host\": [\"https://jsonplaceholder.typicode.com\"],\n          \"url_pattern\": \"/todos\",\n          \"method\": \"GET\",\n          \"encoding\": \"no-op\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n上方的設定表示會代理 `https://jsonplaceholder.typicode.com/todos` 這個 API，使用者只需要用 `GET` 方法存取 [http://localhost:8080/api/todos](http://localhost:8080/api/todos) 即可獲得該 API 的結果。\n\n### extra_config 基礎介紹\n\n`extra_config` 主要是負責針對各式 Plugin 進行設定，每個 Plugin 都會有一個獨一無二的 **命名空間(Namespace)**，KrakenD 會在啟動時註冊 Plugin 並從 `extra_config` 找出對應名稱的設定，再將該設定內容傳遞給 Plugin。下方是擴展 Log 的 `extra_config` 設定：\n\n```json\n{\n  // ...\n    \"extra_config\": {\n      \"telemetry/logging\": {\n        \"level\": \"WARNING\",\n        \"prefix\": \"[KRAKEND]\",\n        \"stdout\": true\n      }\n  }\n}\n```\n\n> **NOTE**：有關 `telemetry/logging` 的介紹後續有機會再跟大家分享。\n\n`extra_config` 不僅可以出現在設定檔的根層級，也可以出現在其他層級，放的層級越深，作用的範圍就越小，而實際放置位置取決於 Plugin 的用途與性質。下方是 `extra_config` 可以設置的層級：\n\n* `service`：服務層級，也就是與 `endpoints` 相同層級的位置。這個層級會影響整個 KrakenD 以及所有請求。\n* `endpoint`：Endpoint 層級，指的是 `endpoints` 中的物件。影響範圍僅限於該 API Endpoint。\n* `backend`：Backend 層級，指的是 `backends` 中的物件。影響範圍僅限於該 Backend。\n\n## 小品練習\n\n首先，建立一個資料夾 `src` 並同時在該資料夾下新增 `krakend.json`：\n\n```json\n{\n  \"$schema\": \"https://www.krakend.io/schema/v2.8/krakend.json\",\n  \"version\": 3,\n  \"endpoints\": [\n    {\n      \"endpoint\": \"/api/todos\",\n      \"output_encoding\": \"no-op\",\n      \"backend\": [\n        {\n          \"host\": [\"https://jsonplaceholder.typicode.com\"],\n          \"url_pattern\": \"/todos\",\n          \"method\": \"GET\",\n          \"encoding\": \"no-op\"\n        }\n      ]\n    }\n  ],\n  \"extra_config\": {\n    \"telemetry/logging\": {\n      \"level\": \"WARNING\",\n      \"prefix\": \"[KRAKEND]\",\n      \"stdout\": true\n    }\n  }\n}\n```\n\n接著，透過下方指令以 Docker Volume 的方式將 `src` 資料夾 mapping 至 `/etc/krakend`，同時透過 `-c` 參數指定使用 `krakend.json` 作為設定檔：\n\n```bash\n$ docker run -p 8080:8080 -v $PWD/src:/etc/krakend devopsfaith/krakend run -c krakend.json\n```\n\n透過 Postman 以 `GET` 方法存取 [http://localhost:8080/api/todos](http://localhost:8080/api/todos)，可以順利拿到來自 `https://jsonplaceholder.typicode.com/todos` 的資料：\n\n<img\n  style=\"max-width: 500px;\"\n  src=\"krakend-result.png\"\n  alt=\"KrakenD Result\"\n/>\n\n## 結論\n\n今天簡單介紹了 KrakenD 以及啟動的方式，對於設定檔也有了初步的了解。後續會再針對設定檔的細節做更詳細的解說。","slug":"0003-what-is-krakend","published":1,"updated":"2025-01-11T11:40:13.352Z","_id":"cm4ctx8ii0000v60ydi9v2hpt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什麼是-KrakenD？\"><a href=\"#什麼是-KrakenD？\" class=\"headerlink\" title=\"什麼是 KrakenD？\"></a>什麼是 KrakenD？</h2><p><a href=\"https://www.krakend.io/\">KrakenD</a> 是一套開源、可擴充、高效能的 <strong>API Gateway</strong>，使用 <a href=\"https://go.dev/\">Golang</a> 所撰寫，透過 JSON 設定檔即可聚合多個微服務到單一 Endpoint，並能夠運用內建或社群提供的 <strong>中介軟體(Middleware)</strong> 來擴展其功能，自動完成部分繁重的工作，如：<strong>聚合(Aggregate)<strong>、</strong>轉換(Transform)<strong>、</strong>過濾(Filter)<strong>、</strong>解碼(Decode)<strong>、</strong>節流(Throttle)<strong>、</strong>身份驗證(Authenticate)</strong> 等。</p>\n<p><img\n  style=\"max-width: 500px;\"\n  src=\"krakend-flow.png\"\n  alt=\"KrakenD Flow Concept\"\n/></p>\n<p><a href=\"https://www.krakend.io/docs/overview/\">圖片來源</a></p>\n<h2 id=\"安裝-KrakenD\"><a href=\"#安裝-KrakenD\" class=\"headerlink\" title=\"安裝 KrakenD\"></a>安裝 KrakenD</h2><p>KrakenD 有提供多種安裝方式，其中 Docker Image 的方式是最快、最容易的。透過下方指令即可將 KrakenD 的 Docker Image 從 Docker Hub 下載下來：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull devopsfaith/krakend</span><br></pre></td></tr></table></figure>\n\n<p>使用下方指令即可快速啟動 KrakenD：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -p 8080:8080 devopsfaith/krakend</span><br></pre></td></tr></table></figure>\n\n<p>啟動後，可以透過 <code>GET</code> 方法存取 <a href=\"http://localhost:8080/__health\">http://localhost:8080/__health</a> 來取得 KrakenD 的健康狀態，如果有收到下方回應就表示啟動成功：</p>\n<p><img\n  style=\"max-width: 500px;\"\n  src=\"health-check-result.png\"\n  alt=\"Health Check Result\"\n/></p>\n<p>這時可能會有些疑問，前面提到 KrakenD 是透過 JSON 設定檔來建立 Endpoint 的，但剛剛的步驟中沒有撰寫到任何的 JSON 卻可以順利啟動 KrakenD？原因是 KrakenD 預設狀況下會去讀取 <code>/etc/krakend</code> 路徑下的 <code>krakend.json</code>，當我們沒有透過 <a href=\"https://docs.docker.com/engine/storage/volumes/\">Docker Volume</a> 的方式將實體主機上檔案 mapping 到 container 內部時，預設會使用最基礎的 <code>krakend.json</code> 來啟動 KrakenD。</p>\n<h2 id=\"認識-KrakenD-指令\"><a href=\"#認識-KrakenD-指令\" class=\"headerlink\" title=\"認識 KrakenD 指令\"></a>認識 KrakenD 指令</h2><p>上述快速啟動 KrakenD 的方式，其實是該 Image 預設會執行 KrakenD 的 <code>run</code> 指令，那麼我們要如何完整的使用 KrakenD 所提供的指令與參數呢？我們可以透過下方指令執行 <code>help</code> 來查看 KrakenD 提供了哪些指令與參數：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --<span class=\"built_in\">rm</span> -it devopsfaith/krakend <span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img\n  style=\"max-width: 500px;\"\n  src=\"krakend-help.png\"\n  alt=\"KrakenD Help\"\n/></p>\n<p>從上圖可以看到共有以下幾個指令：</p>\n<ul>\n<li><code>audit</code>：檢查設定檔是否存在安全性風險。</li>\n<li><code>check</code>：檢查設定檔的格式、屬性等是合法的。</li>\n<li><code>check-plugin</code>：如果有自訂 <strong>插件(Plugin)</strong> 的話，可以透過這個指令來檢查是否與 KrakenD 相容。</li>\n<li><code>help</code>：查看 KrakenD 提供了哪些指令與參數。</li>\n<li><code>run</code>：啟動服務。</li>\n<li><code>test-plugin</code>：測試 Plugin 是否能夠被 KrakenD 載入。</li>\n<li><code>version</code>：顯示 KrakenD 版本以及編譯時使用的 Glibc 與 Golang 版本。</li>\n</ul>\n<blockquote>\n<p><strong>NOTE</strong>：上述指令中，大部分都需要更深入了解 KrakenD 才能理解其用途，之後介紹到相對應的功能時，會做更詳細的說明。</p>\n</blockquote>\n<h2 id=\"認識設定檔\"><a href=\"#認識設定檔\" class=\"headerlink\" title=\"認識設定檔\"></a>認識設定檔</h2><p>前面有提到 KrakenD 會需要 <code>krakend.json</code> 才能啟動，這個設定檔最簡單的設置如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>version</code> 表示 <strong>設定檔的版本</strong>，與 KrakenD 版本不同，但每個設定檔版本都有 KrakenD 支援的版本區間：</p>\n<ul>\n<li><code>3</code>：目前最新版本，只要 KrakenD 在 <code>v2.0</code> 以上就可以使用。</li>\n<li><code>2</code>：在 2022 時棄用，KrakenD 版本在 <code>v0.4</code> 到 <code>v1.4.1</code> 時使用。</li>\n<li><code>1</code>：在 2016 時棄用，KrakenD 版本在 <code>v0.3.9</code> 以下時使用。</li>\n</ul>\n<p>實務上，我們不會只有一個 <code>version</code> 在設定檔內，這樣啟動後的 KrakenD 也沒有發揮 API Gateway 的功能。一個設定檔的主要結構如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;$schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://www.krakend.io/schema/v2.8/krakend.json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;endpoints&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extra_config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上方可以看到多了三個屬性：</p>\n<ul>\n<li><code>$schema</code>：套用 KrakenD 提供的 JSON Schema，這樣可以與編輯器做整合，在撰寫該設定檔時，能夠有更多的提示訊息。此項目雖然不是必要的，但非常建議添加。</li>\n<li><code>endpoints</code>：定義 API 的設定。</li>\n<li><code>extra_config</code>：擴展 KrakenD 的元件設定。</li>\n</ul>\n<h3 id=\"endpoints-基礎介紹\"><a href=\"#endpoints-基礎介紹\" class=\"headerlink\" title=\"endpoints 基礎介紹\"></a>endpoints 基礎介紹</h3><p><code>endpoints</code> 可說是 KrakenD 最重要的設定，因為它會用來定義 KrakenD 要提供哪些 API 給使用者以及該 API 背後對應的服務是哪些。<code>endpoints</code> 內每個物件都是一個 API 的定義，下方是一個代理 Todo API 的設定：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;endpoints&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;endpoint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/todos&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;output_encoding&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;no-op&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;backend&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;host&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;https://jsonplaceholder.typicode.com&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;url_pattern&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/todos&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;method&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;GET&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;encoding&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;no-op&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上方的設定表示會代理 <code>https://jsonplaceholder.typicode.com/todos</code> 這個 API，使用者只需要用 <code>GET</code> 方法存取 <a href=\"http://localhost:8080/api/todos\">http://localhost:8080/api/todos</a> 即可獲得該 API 的結果。</p>\n<h3 id=\"extra-config-基礎介紹\"><a href=\"#extra-config-基礎介紹\" class=\"headerlink\" title=\"extra_config 基礎介紹\"></a>extra_config 基礎介紹</h3><p><code>extra_config</code> 主要是負責針對各式 Plugin 進行設定，每個 Plugin 都會有一個獨一無二的 **命名空間(Namespace)**，KrakenD 會在啟動時註冊 Plugin 並從 <code>extra_config</code> 找出對應名稱的設定，再將該設定內容傳遞給 Plugin。下方是擴展 Log 的 <code>extra_config</code> 設定：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extra_config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;telemetry/logging&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;level&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;WARNING&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;prefix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;[KRAKEND]&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;stdout&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>NOTE</strong>：有關 <code>telemetry/logging</code> 的介紹後續有機會再跟大家分享。</p>\n</blockquote>\n<p><code>extra_config</code> 不僅可以出現在設定檔的根層級，也可以出現在其他層級，放的層級越深，作用的範圍就越小，而實際放置位置取決於 Plugin 的用途與性質。下方是 <code>extra_config</code> 可以設置的層級：</p>\n<ul>\n<li><code>service</code>：服務層級，也就是與 <code>endpoints</code> 相同層級的位置。這個層級會影響整個 KrakenD 以及所有請求。</li>\n<li><code>endpoint</code>：Endpoint 層級，指的是 <code>endpoints</code> 中的物件。影響範圍僅限於該 API Endpoint。</li>\n<li><code>backend</code>：Backend 層級，指的是 <code>backends</code> 中的物件。影響範圍僅限於該 Backend。</li>\n</ul>\n<h2 id=\"小品練習\"><a href=\"#小品練習\" class=\"headerlink\" title=\"小品練習\"></a>小品練習</h2><p>首先，建立一個資料夾 <code>src</code> 並同時在該資料夾下新增 <code>krakend.json</code>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;$schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://www.krakend.io/schema/v2.8/krakend.json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;endpoints&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;endpoint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/todos&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;output_encoding&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;no-op&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;backend&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;host&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;https://jsonplaceholder.typicode.com&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;url_pattern&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/todos&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;method&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;GET&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;encoding&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;no-op&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extra_config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;telemetry/logging&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;level&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;WARNING&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;prefix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;[KRAKEND]&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;stdout&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>接著，透過下方指令以 Docker Volume 的方式將 <code>src</code> 資料夾 mapping 至 <code>/etc/krakend</code>，同時透過 <code>-c</code> 參數指定使用 <code>krakend.json</code> 作為設定檔：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -p 8080:8080 -v <span class=\"variable\">$PWD</span>/src:/etc/krakend devopsfaith/krakend run -c krakend.json</span><br></pre></td></tr></table></figure>\n\n<p>透過 Postman 以 <code>GET</code> 方法存取 <a href=\"http://localhost:8080/api/todos\">http://localhost:8080/api/todos</a>，可以順利拿到來自 <code>https://jsonplaceholder.typicode.com/todos</code> 的資料：</p>\n<p><img\n  style=\"max-width: 500px;\"\n  src=\"krakend-result.png\"\n  alt=\"KrakenD Result\"\n/></p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>今天簡單介紹了 KrakenD 以及啟動的方式，對於設定檔也有了初步的了解。後續會再針對設定檔的細節做更詳細的解說。</p>\n","site":{"data":{"widget":{"bottom":[{"name":"推薦 Blog","icon":"fas fa-blog","html":"<div><a href=\"https://hcluo.blogspot.com/\" target=\"_blank\">hcLuo Blog</a></div><div><a href=\"https://blog.leochen.dev/\" target=\"_blank\">Leo's Coding Life</a></div>"}]}}},"cover":false,"excerpt":"","more":"<h2 id=\"什麼是-KrakenD？\"><a href=\"#什麼是-KrakenD？\" class=\"headerlink\" title=\"什麼是 KrakenD？\"></a>什麼是 KrakenD？</h2><p><a href=\"https://www.krakend.io/\">KrakenD</a> 是一套開源、可擴充、高效能的 <strong>API Gateway</strong>，使用 <a href=\"https://go.dev/\">Golang</a> 所撰寫，透過 JSON 設定檔即可聚合多個微服務到單一 Endpoint，並能夠運用內建或社群提供的 <strong>中介軟體(Middleware)</strong> 來擴展其功能，自動完成部分繁重的工作，如：<strong>聚合(Aggregate)<strong>、</strong>轉換(Transform)<strong>、</strong>過濾(Filter)<strong>、</strong>解碼(Decode)<strong>、</strong>節流(Throttle)<strong>、</strong>身份驗證(Authenticate)</strong> 等。</p>\n<p><img\n  style=\"max-width: 500px;\"\n  src=\"krakend-flow.png\"\n  alt=\"KrakenD Flow Concept\"\n/></p>\n<p><a href=\"https://www.krakend.io/docs/overview/\">圖片來源</a></p>\n<h2 id=\"安裝-KrakenD\"><a href=\"#安裝-KrakenD\" class=\"headerlink\" title=\"安裝 KrakenD\"></a>安裝 KrakenD</h2><p>KrakenD 有提供多種安裝方式，其中 Docker Image 的方式是最快、最容易的。透過下方指令即可將 KrakenD 的 Docker Image 從 Docker Hub 下載下來：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull devopsfaith/krakend</span><br></pre></td></tr></table></figure>\n\n<p>使用下方指令即可快速啟動 KrakenD：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -p 8080:8080 devopsfaith/krakend</span><br></pre></td></tr></table></figure>\n\n<p>啟動後，可以透過 <code>GET</code> 方法存取 <a href=\"http://localhost:8080/__health\">http://localhost:8080/__health</a> 來取得 KrakenD 的健康狀態，如果有收到下方回應就表示啟動成功：</p>\n<p><img\n  style=\"max-width: 500px;\"\n  src=\"health-check-result.png\"\n  alt=\"Health Check Result\"\n/></p>\n<p>這時可能會有些疑問，前面提到 KrakenD 是透過 JSON 設定檔來建立 Endpoint 的，但剛剛的步驟中沒有撰寫到任何的 JSON 卻可以順利啟動 KrakenD？原因是 KrakenD 預設狀況下會去讀取 <code>/etc/krakend</code> 路徑下的 <code>krakend.json</code>，當我們沒有透過 <a href=\"https://docs.docker.com/engine/storage/volumes/\">Docker Volume</a> 的方式將實體主機上檔案 mapping 到 container 內部時，預設會使用最基礎的 <code>krakend.json</code> 來啟動 KrakenD。</p>\n<h2 id=\"認識-KrakenD-指令\"><a href=\"#認識-KrakenD-指令\" class=\"headerlink\" title=\"認識 KrakenD 指令\"></a>認識 KrakenD 指令</h2><p>上述快速啟動 KrakenD 的方式，其實是該 Image 預設會執行 KrakenD 的 <code>run</code> 指令，那麼我們要如何完整的使用 KrakenD 所提供的指令與參數呢？我們可以透過下方指令執行 <code>help</code> 來查看 KrakenD 提供了哪些指令與參數：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run --<span class=\"built_in\">rm</span> -it devopsfaith/krakend <span class=\"built_in\">help</span></span><br></pre></td></tr></table></figure>\n\n<p><img\n  style=\"max-width: 500px;\"\n  src=\"krakend-help.png\"\n  alt=\"KrakenD Help\"\n/></p>\n<p>從上圖可以看到共有以下幾個指令：</p>\n<ul>\n<li><code>audit</code>：檢查設定檔是否存在安全性風險。</li>\n<li><code>check</code>：檢查設定檔的格式、屬性等是合法的。</li>\n<li><code>check-plugin</code>：如果有自訂 <strong>插件(Plugin)</strong> 的話，可以透過這個指令來檢查是否與 KrakenD 相容。</li>\n<li><code>help</code>：查看 KrakenD 提供了哪些指令與參數。</li>\n<li><code>run</code>：啟動服務。</li>\n<li><code>test-plugin</code>：測試 Plugin 是否能夠被 KrakenD 載入。</li>\n<li><code>version</code>：顯示 KrakenD 版本以及編譯時使用的 Glibc 與 Golang 版本。</li>\n</ul>\n<blockquote>\n<p><strong>NOTE</strong>：上述指令中，大部分都需要更深入了解 KrakenD 才能理解其用途，之後介紹到相對應的功能時，會做更詳細的說明。</p>\n</blockquote>\n<h2 id=\"認識設定檔\"><a href=\"#認識設定檔\" class=\"headerlink\" title=\"認識設定檔\"></a>認識設定檔</h2><p>前面有提到 KrakenD 會需要 <code>krakend.json</code> 才能啟動，這個設定檔最簡單的設置如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>version</code> 表示 <strong>設定檔的版本</strong>，與 KrakenD 版本不同，但每個設定檔版本都有 KrakenD 支援的版本區間：</p>\n<ul>\n<li><code>3</code>：目前最新版本，只要 KrakenD 在 <code>v2.0</code> 以上就可以使用。</li>\n<li><code>2</code>：在 2022 時棄用，KrakenD 版本在 <code>v0.4</code> 到 <code>v1.4.1</code> 時使用。</li>\n<li><code>1</code>：在 2016 時棄用，KrakenD 版本在 <code>v0.3.9</code> 以下時使用。</li>\n</ul>\n<p>實務上，我們不會只有一個 <code>version</code> 在設定檔內，這樣啟動後的 KrakenD 也沒有發揮 API Gateway 的功能。一個設定檔的主要結構如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;$schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://www.krakend.io/schema/v2.8/krakend.json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;endpoints&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extra_config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上方可以看到多了三個屬性：</p>\n<ul>\n<li><code>$schema</code>：套用 KrakenD 提供的 JSON Schema，這樣可以與編輯器做整合，在撰寫該設定檔時，能夠有更多的提示訊息。此項目雖然不是必要的，但非常建議添加。</li>\n<li><code>endpoints</code>：定義 API 的設定。</li>\n<li><code>extra_config</code>：擴展 KrakenD 的元件設定。</li>\n</ul>\n<h3 id=\"endpoints-基礎介紹\"><a href=\"#endpoints-基礎介紹\" class=\"headerlink\" title=\"endpoints 基礎介紹\"></a>endpoints 基礎介紹</h3><p><code>endpoints</code> 可說是 KrakenD 最重要的設定，因為它會用來定義 KrakenD 要提供哪些 API 給使用者以及該 API 背後對應的服務是哪些。<code>endpoints</code> 內每個物件都是一個 API 的定義，下方是一個代理 Todo API 的設定：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;endpoints&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;endpoint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/todos&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;output_encoding&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;no-op&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;backend&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;host&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;https://jsonplaceholder.typicode.com&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;url_pattern&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/todos&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;method&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;GET&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;encoding&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;no-op&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上方的設定表示會代理 <code>https://jsonplaceholder.typicode.com/todos</code> 這個 API，使用者只需要用 <code>GET</code> 方法存取 <a href=\"http://localhost:8080/api/todos\">http://localhost:8080/api/todos</a> 即可獲得該 API 的結果。</p>\n<h3 id=\"extra-config-基礎介紹\"><a href=\"#extra-config-基礎介紹\" class=\"headerlink\" title=\"extra_config 基礎介紹\"></a>extra_config 基礎介紹</h3><p><code>extra_config</code> 主要是負責針對各式 Plugin 進行設定，每個 Plugin 都會有一個獨一無二的 **命名空間(Namespace)**，KrakenD 會在啟動時註冊 Plugin 並從 <code>extra_config</code> 找出對應名稱的設定，再將該設定內容傳遞給 Plugin。下方是擴展 Log 的 <code>extra_config</code> 設定：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extra_config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;telemetry/logging&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;level&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;WARNING&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;prefix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;[KRAKEND]&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;stdout&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>NOTE</strong>：有關 <code>telemetry/logging</code> 的介紹後續有機會再跟大家分享。</p>\n</blockquote>\n<p><code>extra_config</code> 不僅可以出現在設定檔的根層級，也可以出現在其他層級，放的層級越深，作用的範圍就越小，而實際放置位置取決於 Plugin 的用途與性質。下方是 <code>extra_config</code> 可以設置的層級：</p>\n<ul>\n<li><code>service</code>：服務層級，也就是與 <code>endpoints</code> 相同層級的位置。這個層級會影響整個 KrakenD 以及所有請求。</li>\n<li><code>endpoint</code>：Endpoint 層級，指的是 <code>endpoints</code> 中的物件。影響範圍僅限於該 API Endpoint。</li>\n<li><code>backend</code>：Backend 層級，指的是 <code>backends</code> 中的物件。影響範圍僅限於該 Backend。</li>\n</ul>\n<h2 id=\"小品練習\"><a href=\"#小品練習\" class=\"headerlink\" title=\"小品練習\"></a>小品練習</h2><p>首先，建立一個資料夾 <code>src</code> 並同時在該資料夾下新增 <code>krakend.json</code>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;$schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://www.krakend.io/schema/v2.8/krakend.json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;endpoints&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;endpoint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/api/todos&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;output_encoding&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;no-op&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;backend&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;host&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;https://jsonplaceholder.typicode.com&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;url_pattern&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/todos&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;method&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;GET&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;encoding&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;no-op&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;extra_config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;telemetry/logging&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;level&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;WARNING&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;prefix&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;[KRAKEND]&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;stdout&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>接著，透過下方指令以 Docker Volume 的方式將 <code>src</code> 資料夾 mapping 至 <code>/etc/krakend</code>，同時透過 <code>-c</code> 參數指定使用 <code>krakend.json</code> 作為設定檔：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -p 8080:8080 -v <span class=\"variable\">$PWD</span>/src:/etc/krakend devopsfaith/krakend run -c krakend.json</span><br></pre></td></tr></table></figure>\n\n<p>透過 Postman 以 <code>GET</code> 方法存取 <a href=\"http://localhost:8080/api/todos\">http://localhost:8080/api/todos</a>，可以順利拿到來自 <code>https://jsonplaceholder.typicode.com/todos</code> 的資料：</p>\n<p><img\n  style=\"max-width: 500px;\"\n  src=\"krakend-result.png\"\n  alt=\"KrakenD Result\"\n/></p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>今天簡單介紹了 KrakenD 以及啟動的方式，對於設定檔也有了初步的了解。後續會再針對設定檔的細節做更詳細的解說。</p>\n"}],"PostAsset":[{"_id":"source/_posts/0001-dynamic-load-web-component/web-component-dynamic-loader.png","slug":"web-component-dynamic-loader.png","post":"clmdg2qna00007tgx683k9vkw","modified":0,"renderable":0},{"_id":"source/_posts/0001-dynamic-load-web-component/web-component-for-framework.png","slug":"web-component-for-framework.png","post":"clmdg2qna00007tgx683k9vkw","modified":0,"renderable":0},{"_id":"source/_posts/0003-what-is-krakend/krakend-flow.png","slug":"krakend-flow.png","post":"cm4ctx8ii0000v60ydi9v2hpt","modified":0,"renderable":0},{"_id":"source/_posts/0003-what-is-krakend/health-check-result.png","slug":"health-check-result.png","post":"cm4ctx8ii0000v60ydi9v2hpt","modified":0,"renderable":0},{"_id":"source/_posts/0003-what-is-krakend/krakend-help.png","slug":"krakend-help.png","post":"cm4ctx8ii0000v60ydi9v2hpt","modified":0,"renderable":0},{"_id":"source/_posts/0003-what-is-krakend/krakend-result.png","slug":"krakend-result.png","post":"cm4ctx8ii0000v60ydi9v2hpt","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clmdg2qna00007tgx683k9vkw","category_id":"clmbt6q9w0000vzgxcgga6r3x","_id":"clmdg2qnc00047tgxgh0aeg7f"},{"post_id":"clmdg2qna00007tgx683k9vkw","category_id":"clmbt6qa10001vzgxd2p3a5xl","_id":"clmdg2qnc00057tgx3m3tgupr"},{"post_id":"clmn9ksut000027gx9rsk5qmk","category_id":"clmn9ksuy000227gxcotf2d2u","_id":"clmn9ksv0000827gxgbetho0h"},{"post_id":"clmn9ksut000027gx9rsk5qmk","category_id":"clmn9ksuz000427gx95ztax8o","_id":"clmn9ksv0000927gx81rie5r1"},{"post_id":"clmn9ksut000027gx9rsk5qmk","category_id":"clmn9ksv0000727gxbhg5cgc4","_id":"clmn9ksv0000a27gxg08vajwf"},{"post_id":"cm4ctx8ii0000v60ydi9v2hpt","category_id":"clmn9ksuy000227gxcotf2d2u","_id":"cm4cu0inq0005v60y12c9domi"},{"post_id":"cm4ctx8ii0000v60ydi9v2hpt","category_id":"cm4cu0inn0002v60y5p9f415p","_id":"cm4cu0inq0007v60y1nim2gws"}],"PostTag":[{"post_id":"clmdg2qna00007tgx683k9vkw","tag_id":"clmbt4mtg0006u5gx9pd1dtxe","_id":"clmdg2qnb00017tgxev12041s"},{"post_id":"clmdg2qna00007tgx683k9vkw","tag_id":"clmbt4e6c0001u5gx77ragmgm","_id":"clmdg2qnc00027tgxcnwp78z0"},{"post_id":"clmdg2qna00007tgx683k9vkw","tag_id":"clmbt4e6c0002u5gxckc77y8n","_id":"clmdg2qnc00037tgx93lqdu95"},{"post_id":"clmn9ksut000027gx9rsk5qmk","tag_id":"clmn9ksux000127gxc5l9cqc4","_id":"clmn9ksuz000527gxgtukaape"},{"post_id":"clmn9ksut000027gx9rsk5qmk","tag_id":"clmn9ksuy000327gx32t5c2kp","_id":"clmn9ksuz000627gx78oshexx"},{"post_id":"cm4ctx8ii0000v60ydi9v2hpt","tag_id":"clmn9ksux000127gxc5l9cqc4","_id":"cm4cu0inp0004v60ye7nigkri"},{"post_id":"cm4ctx8ii0000v60ydi9v2hpt","tag_id":"cm4cu0inn0001v60y3i0j9rvq","_id":"cm4cu0inq0006v60ybiga5z4s"},{"post_id":"cm4ctx8ii0000v60ydi9v2hpt","tag_id":"cm4cu0ino0003v60y4rr45owa","_id":"cm4cu0inq0008v60yghhi04t3"}],"Tag":[{"name":"frontend,Angular,web-component","_id":"clmbt1tot0001scgxaj6q80p7"},{"name":"frontend Angular Web Component","_id":"clmbt30nq0003scgx9y8i9nr3"},{"name":"frontend","_id":"clmbt4e6a0000u5gx6hod943z"},{"name":"Angular","_id":"clmbt4e6c0001u5gx77ragmgm"},{"name":"Web Component","_id":"clmbt4e6c0002u5gxckc77y8n"},{"name":"Frontend","_id":"clmbt4mtg0006u5gx9pd1dtxe"},{"name":"Backend","_id":"clmn9ksux000127gxc5l9cqc4"},{"name":"NestJS","_id":"clmn9ksuy000327gx32t5c2kp"},{"name":"APIGateway","_id":"cm4cu0inn0001v60y3i0j9rvq"},{"name":"KrakenD","_id":"cm4cu0ino0003v60y4rr45owa"}]}}